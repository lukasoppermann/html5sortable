{"version":3,"file":"html5sortable.min.js","sources":["../src/data.ts","../src/filter.ts","../src/store.ts","../src/eventListener.ts","../src/attribute.ts","../src/offset.ts","../src/debounce.ts","../src/getIndex.ts","../src/isInDom.ts","../src/insertHtmlElements.ts","../src/serialize.ts","../src/makePlaceholder.ts","../src/elementHeight.ts","../src/elementWidth.ts","../src/getHandles.ts","../src/getEventTarget.ts","../src/setDragImage.ts","../src/isConnected.ts","../src/defaultConfiguration.ts","../src/hoverClass.ts","../src/html5sortable.ts","../src/throttle.ts"],"sourcesContent":["/**\n * Get or set data on element\n * @param {HTMLElement} element\n * @param {string} key\n * @param {any} value\n * @return {*}\n */\n\nfunction addData (element: HTMLElement, key: string, value?: any): HTMLElement|configuration|string|void {\n  if (value === undefined) {\n    return element && element.h5s && element.h5s.data && element.h5s.data[key]\n  } else {\n    element.h5s = element.h5s || {}\n    element.h5s.data = element.h5s.data || {}\n    element.h5s.data[key] = value\n  }\n}\n/**\n * Remove data from element\n * @param {HTMLElement} element\n */\nfunction removeData (element: HTMLElement) {\n  if (element.h5s) {\n    delete element.h5s.data\n  }\n}\n\nexport { addData, removeData }\n","/* eslint-env browser */\n/**\n * Filter only wanted nodes\n * @param {NodeList|HTMLCollection|Array} nodes\n * @param {String} selector\n * @returns {Array}\n */\nexport default (nodes: NodeList|HTMLCollection|Array<HTMLElement>, selector: string): Array<HTMLElement> => {\n  if (!(nodes instanceof NodeList || nodes instanceof HTMLCollection || nodes instanceof Array)) {\n    throw new Error('You must provide a nodeList/HTMLCollection/Array of elements to be filtered.')\n  }\n  if (typeof selector !== 'string') {\n    return Array.from(nodes)\n  }\n\n  return Array.from(nodes).filter((item) => item.nodeType === 1 && item.matches(selector))\n}\n","/* eslint-env browser */\n/* eslint-disable no-use-before-define */\nimport { Store as StoreInterface } from './types/store'\nexport const stores: Map<HTMLElement, Store> = new Map()\n/* eslint-enable no-use-before-define */\n/**\n * Stores data & configurations per Sortable\n * @param {Object} config\n */\nexport class Store implements StoreInterface {\n  private _config: Map<string, any> = new Map() // eslint-disable-line no-undef\n  private _placeholder?: HTMLElement = undefined // eslint-disable-line no-undef\n  private _data: Map<string, any> = new Map() // eslint-disable-line no-undef\n  /**\n   * set the configuration of a class instance\n   * @method config\n   * @param {object} config object of configurations\n   */\n  set config (config: configuration) {\n    if (typeof config !== 'object') {\n      throw new Error('You must provide a valid configuration object to the config setter.')\n    }\n    // combine config with default\n    const mergedConfig = Object.assign({}, config)\n    // add config to map\n    this._config = new Map(Object.entries(mergedConfig))\n  }\n  /**\n   * get the configuration map of a class instance\n   * @method config\n   * @return {object}\n   */\n\n  get config (): configuration {\n    // transform Map to object\n    const config = {}\n    this._config.forEach((value, key) => {\n      config[key] = value\n    })\n    // return object\n    return config\n  }\n\n  /**\n   * set individual configuration of a class instance\n   * @method setConfig\n   * @param  key valid configuration key\n   * @param  value any value\n   * @return void\n   */\n  setConfig (key: string, value: any): void {\n    if (!this._config.has(key)) {\n      throw new Error(`Trying to set invalid configuration item: ${key}`)\n    }\n    // set config\n    this._config.set(key, value)\n  }\n\n  /**\n   * get an individual configuration of a class instance\n   * @method getConfig\n   * @param  key valid configuration key\n   * @return any configuration value\n   */\n  getConfig (key: string): any {\n    if (!this._config.has(key)) {\n      throw new Error(`Invalid configuration item requested: ${key}`)\n    }\n    return this._config.get(key)\n  }\n\n  /**\n   * get the placeholder for a class instance\n   * @method placeholder\n   * @return {HTMLElement|null}\n   */\n  get placeholder (): HTMLElement {\n    return this._placeholder\n  }\n\n  /**\n   * set the placeholder for a class instance\n   * @method placeholder\n   * @param {HTMLElement} placeholder\n   * @return {void}\n   */\n  set placeholder (placeholder: HTMLElement) {\n    if (!(placeholder instanceof HTMLElement) && placeholder !== null) {\n      throw new Error('A placeholder must be an html element or null.')\n    }\n    this._placeholder = placeholder\n  }\n\n  /**\n   * set an data entry\n   * @method setData\n   * @param {string} key\n   * @param {any} value\n   * @return {void}\n   */\n  setData (key: string, value: Function): void {\n    if (typeof key !== 'string') {\n      throw new Error('The key must be a string.')\n    }\n    this._data.set(key, value)\n  }\n\n  /**\n   * get an data entry\n   * @method getData\n   * @param {string} key an existing key\n   * @return {any}\n   */\n  getData (key: string): any {\n    if (typeof key !== 'string') {\n      throw new Error('The key must be a string.')\n    }\n    return this._data.get(key)\n  }\n\n  /**\n   * delete an data entry\n   * @method deleteData\n   * @param {string} key an existing key\n   * @return {boolean}\n   */\n  deleteData (key: string): boolean {\n    if (typeof key !== 'string') {\n      throw new Error('The key must be a string.')\n    }\n    return this._data.delete(key)\n  }\n}\n/**\n * @param {HTMLElement} sortableElement\n * @returns {Class: Store}\n */\nexport default (sortableElement: HTMLElement): Store => {\n  // if sortableElement is wrong type\n  if (!(sortableElement instanceof HTMLElement)) {\n    throw new Error('Please provide a sortable to the store function.')\n  }\n  // create new instance if not avilable\n  if (!stores.has(sortableElement)) {\n    stores.set(sortableElement, new Store())\n  }\n  // return instance\n  return stores.get(sortableElement)\n}\n","import store from './store'\n/**\n * @param {Array|HTMLElement} element\n * @param {Function} callback\n * @param {string} event\n */\nfunction addEventListener (element: Array<HTMLElement>|HTMLElement, eventName:string, callback: () => void) {\n  if (element instanceof Array) {\n    for (let i = 0; i < element.length; ++i) {\n      addEventListener(element[i], eventName, callback)\n    }\n    return\n  }\n  element.addEventListener(eventName, callback)\n  store(element).setData(`event${eventName}`, callback)\n}\n/**\n * @param {Array<HTMLElement>|HTMLElement} element\n * @param {string} eventName\n */\nfunction removeEventListener (element: Array<HTMLElement>|HTMLElement, eventName: string) {\n  if (element instanceof Array) {\n    for (let i = 0; i < element.length; ++i) {\n      removeEventListener(element[i], eventName)\n    }\n    return\n  }\n  element.removeEventListener(eventName, store(element).getData(`event${eventName}`))\n  store(element).deleteData(`event${eventName}`)\n}\n\nexport { addEventListener, removeEventListener }\n","/**\n * @param {Array<HTMLElement>|HTMLElement} element\n * @param {string} attribute\n * @param {string} value\n */\nfunction addAttribute (element: Array<HTMLElement>|HTMLElement, attribute:string, value:string) {\n  if (element instanceof Array) {\n    for (let i = 0; i < element.length; ++i) {\n      addAttribute(element[i], attribute, value)\n    }\n    return\n  }\n  element.setAttribute(attribute, value)\n}\n/**\n * @param {Array|HTMLElement} element\n * @param {string} attribute\n */\nfunction removeAttribute (element: Array<HTMLElement>|HTMLElement, attribute:string) {\n  if (element instanceof Array) {\n    for (let i = 0; i < element.length; ++i) {\n      removeAttribute(element[i], attribute)\n    }\n    return\n  }\n  element.removeAttribute(attribute)\n}\n\nexport { addAttribute, removeAttribute }\n","/**\n * @param {HTMLElement} element\n * @returns {Object}\n */\nexport default (element: HTMLElement): offsetObject => {\n  if (!element.parentElement || element.getClientRects().length === 0) {\n    throw new Error('target element must be part of the dom')\n  }\n\n  const rect = element.getClientRects()[0]\n  return {\n    left: rect.left + window.pageXOffset,\n    right: rect.right + window.pageXOffset,\n    top: rect.top + window.pageYOffset,\n    bottom: rect.bottom + window.pageYOffset\n  }\n}\n","/**\n * Creates and returns a new debounced version of the passed function which will postpone its execution until after wait milliseconds have elapsed\n * @param {Function} func to debounce\n * @param {number} time to wait before calling function with latest arguments, 0 - no debounce\n * @returns {function} - debounced function\n */\nexport default (func: Function, wait: number = 0): Function => {\n  let timeout\n  return (...args) => {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      func(...args)\n    }, wait)\n  }\n}\n","/* eslint-env browser */\n/**\n * Get position of the element relatively to its sibling elements\n * @param {HTMLElement} element\n * @returns {number}\n */\nexport default (element: HTMLElement, elementList: HTMLCollection | NodeList | Array<HTMLElement>): number => {\n  if (!(element instanceof HTMLElement) || !(elementList instanceof NodeList || elementList instanceof HTMLCollection || elementList instanceof Array)) {\n    throw new Error('You must provide an element and a list of elements.')\n  }\n\n  return Array.from(elementList).indexOf(element)\n}\n","/* eslint-env browser */\n/**\n * Test whether element is in DOM\n * @param {HTMLElement} element\n * @returns {boolean}\n */\nexport default (element: HTMLElement): boolean => {\n  if (!(element instanceof HTMLElement)) {\n    throw new Error('Element is not a node element.')\n  }\n\n  return element.parentNode !== null\n}\n","/* eslint-env browser */\n/**\n * Insert node before or after target\n * @param {HTMLElement} referenceNode - reference element\n * @param {HTMLElement} newElement - element to be inserted\n * @param {String} position - insert before or after reference element\n */\nconst insertNode = (referenceNode: HTMLElement, newElement: HTMLElement, position: String) => {\n  if (!(referenceNode instanceof HTMLElement) || !(referenceNode.parentElement instanceof HTMLElement)) {\n    throw new Error('target and element must be a node')\n  }\n  referenceNode.parentElement.insertBefore(\n    newElement,\n    (position === 'before' ? referenceNode : referenceNode.nextElementSibling)\n  )\n}\n/**\n * Insert before target\n * @param {HTMLElement} target\n * @param {HTMLElement} element\n */\nconst insertBefore = (target: HTMLElement, element: HTMLElement) => insertNode(target, element, 'before')\n/**\n * Insert after target\n * @param {HTMLElement} target\n * @param {HTMLElement} element\n */\nconst insertAfter = (target: HTMLElement, element: HTMLElement) => insertNode(target, element, 'after')\n\nexport { insertBefore, insertAfter }\n","/* eslint-env browser */\nimport { addData } from './data' // yuk, data really needs to be refactored\nimport filter from './filter'\nimport getIndex from './getIndex'\n/**\n * Filter only wanted nodes\n * @param {HTMLElement} sortableContainer\n * @param {Function} customSerializer\n * @returns {Array}\n */\nexport default (sortableContainer: HTMLElement, customItemSerializer: Function = (serializedItem: serializedItem, sortableContainer: HTMLElement) => serializedItem, customContainerSerializer: Function = (serializedContainer: object) => serializedContainer): object => {\n  // check for valid sortableContainer\n  if (!(sortableContainer instanceof HTMLElement) || !sortableContainer.isSortable === true) {\n    throw new Error('You need to provide a sortableContainer to be serialized.')\n  }\n  // check for valid serializers\n  if (typeof customItemSerializer !== 'function' || typeof customContainerSerializer !== 'function') {\n    throw new Error('You need to provide a valid serializer for items and the container.')\n  }\n  // get options\n  const options = addData(sortableContainer, 'opts')\n\n  const item: string|undefined = options.items\n\n  // serialize container\n  const items = filter(sortableContainer.children, item)\n  const serializedItems: serializedItem[] = items.map((item) => {\n    return {\n      parent: sortableContainer,\n      node: item,\n      html: item.outerHTML,\n      index: getIndex(item, items)\n    }\n  })\n  // serialize container\n  const container = {\n    node: sortableContainer,\n    itemCount: serializedItems.length\n  }\n\n  return {\n    container: customContainerSerializer(container),\n    items: serializedItems.map((item: object) => customItemSerializer(item, sortableContainer))\n  }\n}\n","/* eslint-env browser */\n/**\n * create a placeholder element\n * @param {HTMLElement} sortableElement a single sortable\n * @param {string|undefined} placeholder a string representing an html element\n * @param {string} placeholderClasses a string representing the classes that should be added to the placeholder\n */\nexport default (sortableElement: HTMLElement, placeholder?: HTMLElement, placeholderClass: string = 'sortable-placeholder') => {\n  if (!(sortableElement instanceof HTMLElement)) {\n    throw new Error('You must provide a valid element as a sortable.')\n  }\n  // if placeholder is not an element\n  if (!(placeholder instanceof HTMLElement) && placeholder !== undefined) {\n    throw new Error('You must provide a valid element as a placeholder or set ot to undefined.')\n  }\n  // if no placeholder element is given\n  if (placeholder === undefined) {\n    if (['UL', 'OL'].includes(sortableElement.tagName)) {\n      placeholder = document.createElement('li')\n    } else if (['TABLE', 'TBODY'].includes(sortableElement.tagName)) {\n      placeholder = document.createElement('tr')\n      // set colspan to always all rows, otherwise the item can only be dropped in first column\n      placeholder.innerHTML = '<td colspan=\"100\"></td>'\n    } else {\n      placeholder = document.createElement('div')\n    }\n  }\n  // add classes to placeholder\n  if (typeof placeholderClass === 'string') {\n    placeholder.classList.add(...placeholderClass.split(' '))\n  }\n\n  return placeholder\n}\n","/* eslint-env browser */\n/**\n * Get height of an element including padding\n * @param {HTMLElement} element an dom element\n */\nexport default (element: HTMLElement) => {\n  if (!(element instanceof HTMLElement)) {\n    throw new Error('You must provide a valid dom element')\n  }\n  // get calculated style of element\n  const style = window.getComputedStyle(element)\n  // get only height if element has box-sizing: border-box specified\n  if (style.getPropertyValue('box-sizing') === 'border-box') {\n    return parseInt(style.getPropertyValue('height'), 10)\n  }\n  // pick applicable properties, convert to int and reduce by adding\n  return ['height', 'padding-top', 'padding-bottom']\n    .map((key) => {\n      const int = parseInt(style.getPropertyValue(key), 10)\n      return isNaN(int) ? 0 : int\n    })\n    .reduce((sum, value) => sum + value)\n}\n","/* eslint-env browser */\n/**\n * Get width of an element including padding\n * @param {HTMLElement} element an dom element\n */\nexport default (element: HTMLElement) => {\n  if (!(element instanceof HTMLElement)) {\n    throw new Error('You must provide a valid dom element')\n  }\n  // get calculated style of element\n  const style = window.getComputedStyle(element)\n  // pick applicable properties, convert to int and reduce by adding\n  return ['width', 'padding-left', 'padding-right']\n    .map((key) => {\n      const int = parseInt(style.getPropertyValue(key), 10)\n      return isNaN(int) ? 0 : int\n    })\n    .reduce((sum, value) => sum + value)\n}\n","/* eslint-env browser */\n/**\n * get handle or return item\n * @param {Array<HTMLElement>} items\n * @param {string} selector\n */\n\nexport default (items: Array<HTMLElement>, selector: string): Array<HTMLElement> => {\n  if (!(items instanceof Array)) {\n    throw new Error('You must provide a Array of HTMLElements to be filtered.')\n  }\n\n  if (typeof selector !== 'string') {\n    return items\n  }\n\n  return items\n  // remove items without handle from array\n    .filter((item: HTMLElement) => {\n      return item.querySelector(selector) instanceof HTMLElement ||\n        (item.shadowRoot && item.shadowRoot.querySelector(selector) instanceof HTMLElement)\n    })\n    // replace item with handle in array\n    .map((item: HTMLElement) => {\n      return item.querySelector(selector) || (item.shadowRoot && item.shadowRoot.querySelector(selector))\n    })\n}\n","/**\n * @param {Event} event\n * @returns {HTMLElement}\n */\nexport default (event: Event): HTMLElement => {\n  return (event.composedPath && event.composedPath()[0]) || event.target\n}\n","/* eslint-env browser */\nimport offset from './offset'\nimport getEventTarget from './getEventTarget'\n/**\n * defaultDragImage returns the current item as dragged image\n * @param {HTMLElement} draggedElement - the item that the user drags\n * @param {object} elementOffset - an object with the offsets top, left, right & bottom\n * @param {Event} event - the original drag event object\n * @return {object} with element, posX and posY properties\n */\nconst defaultDragImage = (draggedElement: HTMLElement, elementOffset: offsetObject, event: DragEvent): object => {\n  return {\n    element: draggedElement,\n    posX: event.pageX - elementOffset.left,\n    posY: event.pageY - elementOffset.top\n  }\n}\n/**\n * attaches an element as the drag image to an event\n * @param {Event} event - the original drag event object\n * @param {HTMLElement} draggedElement - the item that the user drags\n * @param {Function} customDragImage - function to create a custom dragImage\n * @return void\n */\nexport default (event: DragEvent, draggedElement: HTMLElement, customDragImage: Function | Element): void => {\n  // check if event is provided\n  if (!(event instanceof Event)) {\n    throw new Error('setDragImage requires a DragEvent as the first argument.')\n  }\n  // check if draggedElement is provided\n  if (!(draggedElement instanceof HTMLElement)) {\n    throw new Error('setDragImage requires the dragged element as the second argument.')\n  }\n  // set default function of none provided\n  if (!customDragImage) {\n    customDragImage = defaultDragImage\n  }\n  // set default function if none is provided\n  if (customDragImage instanceof HTMLElement) {\n    const elementOffset = offset(customDragImage)\n    const dragImage = {\n      element: customDragImage,\n      posX: event.pageX - elementOffset.left,\n      posY: event.pageY - elementOffset.top\n    }\n    // set the drag image on the event\n    event.dataTransfer.effectAllowed = 'copyMove'\n    event.dataTransfer.setData('text/plain', getEventTarget(event).id)\n    event.dataTransfer.setDragImage(dragImage.element, event.offsetX, event.offsetY)\n  } else if (typeof customDragImage === 'function' && event.dataTransfer.setDragImage) {\n    // check if setDragImage method is available\n    // get the elements offset\n    const elementOffset = offset(draggedElement)\n    // get the dragImage\n    const dragImage = customDragImage(draggedElement, elementOffset, event)\n    // check if custom function returns correct values\n    if (!(dragImage.element instanceof HTMLElement) || typeof dragImage.posX !== 'number' || typeof dragImage.posY !== 'number') {\n      throw new Error('The customDragImage function you provided must return and object with the properties element[string], posX[integer], posY[integer].')\n    }\n    // needs to be set for HTML5 drag & drop to work\n    event.dataTransfer.effectAllowed = 'copyMove'\n    // Firefox requires it to use the event target's id for the data\n    event.dataTransfer.setData('text/plain', getEventTarget(event).id)\n    // set the drag image on the event\n    event.dataTransfer.setDragImage(dragImage.element, dragImage.posX, dragImage.posY)\n  }\n}\n","import store from './store'\n/**\n * Check if curList accepts items from destList\n * @param {sortable} destination the container an item is move to\n * @param {sortable} origin the container an item comes from\n */\nexport default (destination: sortable, origin: sortable) => {\n  // check if valid sortable\n  if (destination.isSortable === true) {\n    const acceptFrom = store(destination).getConfig('acceptFrom')\n    // check if acceptFrom is valid\n    if (acceptFrom !== null && acceptFrom !== false && typeof acceptFrom !== 'string') {\n      throw new Error('HTML5Sortable: Wrong argument, \"acceptFrom\" must be \"null\", \"false\", or a valid selector string.')\n    }\n\n    if (acceptFrom !== null) {\n      return acceptFrom !== false && acceptFrom.split(',').filter(function (sel) {\n        return sel.length > 0 && origin.matches(sel)\n      }).length > 0\n    }\n    // drop in same list\n    if (destination === origin) {\n      return true\n    }\n    // check if lists are connected with connectWith\n    if (store(destination).getConfig('connectWith') !== undefined && store(destination).getConfig('connectWith') !== null) {\n      return store(destination).getConfig('connectWith') === store(origin).getConfig('connectWith')\n    }\n  }\n  return false\n}\n","/**\n * default configurations\n */\nexport default {\n  items: null,\n  // deprecated\n  connectWith: null,\n  // deprecated\n  disableIEFix: null,\n  acceptFrom: null,\n  copy: false,\n  placeholder: null,\n  placeholderClass: 'sortable-placeholder',\n  draggingClass: 'sortable-dragging',\n  hoverClass: false,\n  dropTargetContainerClass: false,\n  debounce: 0,\n  throttleTime: 100,\n  maxItems: 0,\n  itemSerializer: undefined,\n  containerSerializer: undefined,\n  customDragImage: null,\n  orientation: 'vertical'\n}\n","/* eslint-env browser */\nimport store from './store'\nimport filter from './filter'\nimport throttle from './throttle'\nimport { addEventListener, removeEventListener } from './eventListener'\n/**\n * enable or disable hoverClass on mouseenter/leave if container Items\n * @param {sortable} sortableContainer a valid sortableContainer\n * @param {boolean} enable enable or disable event\n */\nexport default (sortableContainer: sortable, enable: boolean) => {\n  if (typeof store(sortableContainer).getConfig('hoverClass') === 'string') {\n    const hoverClasses = store(sortableContainer).getConfig('hoverClass').split(' ')\n    // add class on hover\n    if (enable === true) {\n      addEventListener(sortableContainer, 'mousemove', throttle((event) => {\n        // check of no mouse button was pressed when mousemove started == no drag\n        if (event.buttons === 0) {\n          filter(sortableContainer.children, store(sortableContainer).getConfig('items')).forEach(item => {\n            if (item === event.target || item.contains(event.target)) {\n              item.classList.add(...hoverClasses)\n            } else {\n              item.classList.remove(...hoverClasses)\n            }\n          })\n        }\n      }, store(sortableContainer).getConfig('throttleTime')))\n      // remove class on leave\n      addEventListener(sortableContainer, 'mouseleave', () => {\n        filter(sortableContainer.children, store(sortableContainer).getConfig('items')).forEach(item => {\n          item.classList.remove(...hoverClasses)\n        })\n      })\n    // remove events\n    } else {\n      removeEventListener(sortableContainer, 'mousemove')\n      removeEventListener(sortableContainer, 'mouseleave')\n    }\n  }\n}\n","/* eslint-env browser */\n'use strict'\n\nimport { addData as data, removeData } from './data'\nimport filter from './filter'\nimport { addEventListener as on, removeEventListener as off } from './eventListener'\nimport { addAttribute as attr, removeAttribute as removeAttr } from './attribute'\nimport offset from './offset'\nimport debounce from './debounce'\nimport getIndex from './getIndex'\nimport isInDom from './isInDom'\nimport { insertBefore as before, insertAfter as after } from './insertHtmlElements'\nimport serialize from './serialize'\nimport makePlaceholder from './makePlaceholder'\nimport getElementHeight from './elementHeight'\nimport getElementWidth from './elementWidth'\nimport getHandles from './getHandles'\nimport getEventTarget from './getEventTarget'\nimport setDragImage from './setDragImage'\nimport { default as store, stores } from './store' /* eslint-disable-line */\nimport listsConnected from './isConnected'\nimport defaultConfiguration from './defaultConfiguration'\nimport enableHoverClass from './hoverClass'\n\n/*\n * variables global to the plugin\n */\nlet dragging\nlet draggingHeight\nlet draggingWidth\n\n/*\n * Keeps track of the initialy selected list, where 'dragstart' event was triggered\n * It allows us to move the data in between individual Sortable List instances\n */\n\n// Origin List - data from before any item was changed\nlet originContainer\nlet originIndex\nlet originElementIndex\nlet originItemsBeforeUpdate\n\n// Previous Sortable Container - we dispatch as sortenter event when a\n// dragged item enters a sortableContainer for the first time\nlet previousContainer\n\n// Destination List - data from before any item was changed\nlet destinationItemsBeforeUpdate\n\n/**\n * remove event handlers from items\n * @param {Array|NodeList} items\n */\nconst removeItemEvents = function (items) {\n  off(items, 'dragstart')\n  off(items, 'dragend')\n  off(items, 'dragover')\n  off(items, 'dragenter')\n  off(items, 'drop')\n  off(items, 'mouseenter')\n  off(items, 'mouseleave')\n}\n\n/**\n *\n * remove Store map values\n * @param {Array|NodeList} items\n */\nconst removeStoreData = function (items) {\n  if (items instanceof Array) {\n    items.forEach(element => stores.delete(element))\n  }\n}\n\n// Remove container events\nconst removeContainerEvents = function (originContainer, previousContainer) {\n  if (originContainer) {\n    off(originContainer, 'dragleave')\n  }\n  if (previousContainer && (previousContainer !== originContainer)) {\n    off(previousContainer, 'dragleave')\n  }\n}\n\n/**\n * getDragging returns the current element to drag or\n * a copy of the element.\n * Is Copy Active for sortable\n * @param {HTMLElement} draggedItem - the item that the user drags\n * @param {HTMLElement} sortable a single sortable\n */\nconst getDragging = function (draggedItem, sortable) {\n  let ditem = draggedItem\n  if (store(sortable).getConfig('copy') === true) {\n    ditem = draggedItem.cloneNode(true)\n    attr(ditem, 'aria-copied', 'true')\n    draggedItem.parentElement.appendChild(ditem)\n    ditem.style.display = 'none'\n    ditem.oldDisplay = draggedItem.style.display\n  }\n  return ditem\n}\n/**\n * Remove data from sortable\n * @param {HTMLElement} sortable a single sortable\n */\nconst removeSortableData = function (sortable) {\n  removeData(sortable)\n  removeAttr(sortable, 'aria-dropeffect')\n}\n/**\n * Remove data from items\n * @param {Array<HTMLElement>|HTMLElement} items\n */\nconst removeItemData = function (items) {\n  removeAttr(items, 'aria-grabbed')\n  removeAttr(items, 'aria-copied')\n  removeAttr(items, 'draggable')\n  removeAttr(items, 'role')\n}\n/**\n * find sortable from element. travels up parent element until found or null.\n * @param {HTMLElement} element a single sortable\n * @param {Event} event - the current event. We need to pass it to be able to\n * find Sortable whith shadowRoot (document fragment has no parent)\n */\nfunction findSortable (element, event) {\n  if (event.composedPath) {\n    return event.composedPath().find(el => el.isSortable)\n  }\n  while (element.isSortable !== true) {\n    element = element.parentElement\n  }\n  return element\n}\n/**\n * Dragging event is on the sortable element. finds the top child that\n * contains the element.\n * @param {HTMLElement} sortableElement a single sortable\n * @param {HTMLElement} element is that being dragged\n */\nfunction findDragElement (sortableElement, element) {\n  const options = data(sortableElement, 'opts')\n  const items = filter(sortableElement.children, options.items)\n  const itemlist = items.filter(function (ele) {\n    return ele.contains(element) || (ele.shadowRoot && ele.shadowRoot.contains(element))\n  })\n\n  return itemlist.length > 0 ? itemlist[0] : element\n}\n/**\n * Destroy the sortable\n * @param {HTMLElement} sortableElement a single sortable\n */\nconst destroySortable = function (sortableElement) {\n  const opts = data(sortableElement, 'opts') || {}\n  const items = filter(sortableElement.children, opts.items)\n  const handles = getHandles(items, opts.handle)\n  // disable adding hover class\n  enableHoverClass(sortableElement, false)\n  // remove event handlers & data from sortable\n  off(sortableElement, 'dragover')\n  off(sortableElement, 'dragenter')\n  off(sortableElement, 'dragstart')\n  off(sortableElement, 'dragend')\n  off(sortableElement, 'drop')\n  // remove event data from sortable\n  removeSortableData(sortableElement)\n  // remove event handlers & data from items\n  off(handles, 'mousedown')\n  removeItemEvents(items)\n  removeItemData(items)\n  removeStoreData(items)\n  removeStoreData([sortableElement])\n  removeContainerEvents(originContainer, previousContainer)\n  // clear sortable flag\n  sortableElement.isSortable = false\n}\n/**\n * Enable the sortable\n * @param {HTMLElement} sortableElement a single sortable\n */\nconst enableSortable = function (sortableElement) {\n  const opts = data(sortableElement, 'opts')\n  const items = filter(sortableElement.children, opts.items)\n  const handles = getHandles(items, opts.handle)\n  attr(sortableElement, 'aria-dropeffect', 'move')\n  data(sortableElement, '_disabled', 'false')\n  attr(handles, 'draggable', 'true')\n  // enable hover class\n  enableHoverClass(sortableElement, true)\n  // @todo: remove this fix\n  // IE FIX for ghost\n  // can be disabled as it has the side effect that other events\n  // (e.g. click) will be ignored\n  if (opts.disableIEFix === false) {\n    const spanEl = (document || window.document).createElement('span')\n    if (typeof spanEl.dragDrop === 'function') {\n      on(handles, 'mousedown', function () {\n        if (items.indexOf(this) !== -1) {\n          this.dragDrop()\n        } else {\n          let parent = this.parentElement\n          while (items.indexOf(parent) === -1) {\n            parent = parent.parentElement\n          }\n          parent.dragDrop()\n        }\n      })\n    }\n  }\n}\n/**\n * Disable the sortable\n * @param {HTMLElement} sortableElement a single sortable\n */\nconst disableSortable = function (sortableElement) {\n  const opts = data(sortableElement, 'opts')\n  const items = filter(sortableElement.children, opts.items)\n  const handles = getHandles(items, opts.handle)\n  attr(sortableElement, 'aria-dropeffect', 'none')\n  data(sortableElement, '_disabled', 'true')\n  attr(handles, 'draggable', 'false')\n  off(handles, 'mousedown')\n  enableHoverClass(sortableElement, false)\n}\n/**\n * Reload the sortable\n * @param {HTMLElement} sortableElement a single sortable\n * @description events need to be removed to not be double bound\n */\nconst reloadSortable = function (sortableElement) {\n  const opts = data(sortableElement, 'opts')\n  const items = filter(sortableElement.children, opts.items)\n  const handles = getHandles(items, opts.handle)\n  data(sortableElement, '_disabled', 'false')\n  // remove event handlers from items\n  removeItemEvents(items)\n  removeContainerEvents(originContainer, previousContainer)\n  off(handles, 'mousedown')\n  // remove event handlers from sortable\n  off(sortableElement, 'dragover')\n  off(sortableElement, 'dragenter')\n  off(sortableElement, 'drop')\n}\n\n/**\n * Public sortable object\n * @param {Array|NodeList} sortableElements\n * @param {object|string} options|method\n */\nexport default function sortable (sortableElements, options: configuration|object|string|undefined): sortable {\n  // get method string to see if a method is called\n  const method = String(options)\n  options = options || {}\n  // check if the user provided a selector instead of an element\n  if (typeof sortableElements === 'string') {\n    sortableElements = document.querySelectorAll(sortableElements)\n  }\n  // if the user provided an element, return it in an array to keep the return value consistant\n  if (sortableElements instanceof HTMLElement) {\n    sortableElements = [sortableElements]\n  }\n\n  sortableElements = Array.prototype.slice.call(sortableElements)\n\n  if (/serialize/.test(method)) {\n    return sortableElements.map((sortableContainer) => {\n      const opts = data(sortableContainer, 'opts')\n      return serialize(sortableContainer, opts.itemSerializer, opts.containerSerializer)\n    })\n  }\n\n  sortableElements.forEach(function (sortableElement) {\n    if (/enable|disable|destroy/.test(method)) {\n      return sortable[method](sortableElement)\n    }\n    // log deprecation\n    ['connectWith', 'disableIEFix'].forEach((configKey) => {\n      if (Object.prototype.hasOwnProperty.call(options, configKey) && options[configKey] !== null) {\n        console.warn(`HTML5Sortable: You are using the deprecated configuration \"${configKey}\". This will be removed in an upcoming version, make sure to migrate to the new options when updating.`)\n      }\n    })\n    // merge options with default options\n    options = Object.assign({}, defaultConfiguration, store(sortableElement).config, options)\n    // init data store for sortable\n    store(sortableElement).config = options\n    // set options on sortable\n    data(sortableElement, 'opts', options)\n    // property to define as sortable\n    sortableElement.isSortable = true\n    // reset sortable\n    reloadSortable(sortableElement)\n    // initialize\n    const listItems = filter(sortableElement.children, options.items)\n    // create element if user defined a placeholder element as a string\n    let customPlaceholder\n    if (options.placeholder !== null && options.placeholder !== undefined) {\n      const tempContainer = document.createElement(sortableElement.tagName)\n      if (options.placeholder instanceof HTMLElement) {\n        tempContainer.appendChild(options.placeholder)\n      } else {\n        tempContainer.innerHTML = options.placeholder\n      }\n      customPlaceholder = tempContainer.children[0]\n    }\n    // add placeholder\n    store(sortableElement).placeholder = makePlaceholder(sortableElement, customPlaceholder, options.placeholderClass)\n\n    data(sortableElement, 'items', options.items)\n\n    if (options.acceptFrom) {\n      data(sortableElement, 'acceptFrom', options.acceptFrom)\n    } else if (options.connectWith) {\n      data(sortableElement, 'connectWith', options.connectWith)\n    }\n\n    enableSortable(sortableElement)\n    attr(listItems, 'role', 'option')\n    attr(listItems, 'aria-grabbed', 'false')\n    /*\n     Handle drag events on draggable items\n     Handle is set at the sortableElement level as it will bubble up\n     from the item\n     */\n    on(sortableElement, 'dragstart', function (e) {\n      // ignore dragstart events\n      const target = getEventTarget(e)\n      if (target.isSortable === true) {\n        return\n      }\n      e.stopImmediatePropagation()\n\n      if ((options.handle && !target.matches(options.handle)) || target.getAttribute('draggable') === 'false') {\n        return\n      }\n\n      const sortableContainer = findSortable(target, e)\n      const dragItem = findDragElement(sortableContainer, target)\n\n      // grab values\n      originItemsBeforeUpdate = filter(sortableContainer.children, options.items)\n      originIndex = originItemsBeforeUpdate.indexOf(dragItem)\n      originElementIndex = getIndex(dragItem, sortableContainer.children)\n      originContainer = sortableContainer\n\n      // add transparent clone or other ghost to cursor\n      let dragImage: Function | Element = null\n      if (typeof options.customDragImage === 'string') {\n        dragImage = document.querySelector(options.customDragImage)\n        dragImage ?? console.error('The NodeList provided does not contain any valid elements.')\n      } else if (options.customDragImage === 'function') {\n        dragImage = options.customDragImage as Function\n      }\n      setDragImage(e, dragItem, dragImage)\n      // cache selsection & add attr for dragging\n      draggingHeight = getElementHeight(dragItem)\n      draggingWidth = getElementWidth(dragItem)\n      dragItem.classList.add(options.draggingClass)\n      dragging = getDragging(dragItem, sortableContainer)\n      attr(dragging, 'aria-grabbed', 'true')\n\n      // dispatch sortstart event on each element in group\n      sortableContainer.dispatchEvent(new CustomEvent('sortstart', {\n        detail: {\n          origin: {\n            elementIndex: originElementIndex,\n            index: originIndex,\n            container: originContainer\n          },\n          item: dragging,\n          originalTarget: target\n        }\n      }))\n    })\n\n    /*\n     We are capturing targetSortable before modifications with 'dragenter' event\n    */\n    on(sortableElement, 'dragenter', (e) => {\n      const target = getEventTarget(e)\n      const sortableContainer = findSortable(target, e)\n\n      if (sortableContainer && sortableContainer !== previousContainer) {\n        destinationItemsBeforeUpdate = filter(sortableContainer.children, data(sortableContainer, 'items'))\n          .filter(item => item !== store(sortableElement).placeholder)\n\n        if (options.dropTargetContainerClass) {\n          sortableContainer.classList.add(options.dropTargetContainerClass)\n        }\n        sortableContainer.dispatchEvent(new CustomEvent('sortenter', {\n          detail: {\n            origin: {\n              elementIndex: originElementIndex,\n              index: originIndex,\n              container: originContainer\n            },\n            destination: {\n              container: sortableContainer,\n              itemsBeforeUpdate: destinationItemsBeforeUpdate\n            },\n            item: dragging,\n            originalTarget: target\n          }\n        }))\n\n        on(sortableContainer, 'dragleave', e => {\n          // TODO: rename outTarget to be more self-explanatory\n          // e.fromElement for very old browsers, similar to relatedTarget\n          const outTarget = e.relatedTarget || e.fromElement\n          if (!e.currentTarget.contains(outTarget)) {\n            if (options.dropTargetContainerClass) {\n              sortableContainer.classList.remove(options.dropTargetContainerClass)\n            }\n            sortableContainer.dispatchEvent(new CustomEvent('sortleave', {\n              detail: {\n                origin: {\n                  elementIndex: originElementIndex,\n                  index: originIndex,\n                  container: sortableContainer\n                },\n                item: dragging,\n                originalTarget: target\n              }\n            }))\n          }\n        })\n      }\n      previousContainer = sortableContainer\n    })\n\n    /*\n     * Dragend Event - https://developer.mozilla.org/en-US/docs/Web/Events/dragend\n     * Fires each time dragEvent end, or ESC pressed\n     * We are using it to clean up any draggable elements and placeholders\n     */\n    on(sortableElement, 'dragend', function (e) {\n      if (!dragging) {\n        return\n      }\n\n      dragging.classList.remove(options.draggingClass)\n      attr(dragging, 'aria-grabbed', 'false')\n\n      if (dragging.getAttribute('aria-copied') === 'true' && data(dragging, 'dropped') !== 'true') {\n        dragging.remove()\n      }\n      if (dragging.oldDisplay !== undefined) {\n        dragging.style.display = dragging.oldDisplay\n        delete dragging.oldDisplay\n      }\n      const visiblePlaceholder = Array.from(stores.values()).map(data => data.placeholder)\n        .filter(placeholder => placeholder instanceof HTMLElement)\n        .filter(isInDom)[0]\n\n      if (visiblePlaceholder) {\n        visiblePlaceholder.remove()\n      }\n\n      // dispatch sortstart event on each element in group\n      sortableElement.dispatchEvent(new CustomEvent('sortstop', {\n        detail: {\n          origin: {\n            elementIndex: originElementIndex,\n            index: originIndex,\n            container: originContainer\n          },\n          item: dragging\n        }\n      }))\n\n      previousContainer = null\n      dragging = null\n      draggingHeight = null\n      draggingWidth = null\n    })\n\n    /*\n     * Drop Event - https://developer.mozilla.org/en-US/docs/Web/Events/drop\n     * Fires when valid drop target area is hit\n     */\n    on(sortableElement, 'drop', function (e) {\n      if (!listsConnected(sortableElement, dragging.parentElement)) {\n        return\n      }\n      e.preventDefault()\n      e.stopPropagation()\n\n      data(dragging, 'dropped', 'true')\n      // get the one placeholder that is currently visible\n      const visiblePlaceholder = Array.from(stores.values()).map((data) => {\n        return data.placeholder\n      })\n        // filter only HTMLElements\n        .filter(placeholder => placeholder instanceof HTMLElement)\n        // only elements in DOM\n        .filter(isInDom)[0]\n      if (visiblePlaceholder) {\n        visiblePlaceholder.replaceWith(dragging)\n        // to avoid flickering restoring element display immediately after replacing placeholder\n        if (dragging.oldDisplay !== undefined) {\n          dragging.style.display = dragging.oldDisplay\n          delete dragging.oldDisplay\n        }\n      } else {\n        // set the dropped value to 'false' to delete copied dragging at the time of 'dragend'\n        data(dragging, 'dropped', 'false')\n        return\n      }\n      /*\n       * Fires Custom Event - 'sortstop'\n       */\n      sortableElement.dispatchEvent(new CustomEvent('sortstop', {\n        detail: {\n          origin: {\n            elementIndex: originElementIndex,\n            index: originIndex,\n            container: originContainer\n          },\n          item: dragging\n        }\n      }))\n\n      const placeholder = store(sortableElement).placeholder\n      const originItems = filter(originContainer.children, options.items)\n        .filter(item => item !== placeholder)\n      const destinationContainer = this.isSortable === true ? this : this.parentElement\n      const destinationItems = filter(destinationContainer.children, data(destinationContainer, 'items'))\n        .filter(item => item !== placeholder)\n      const destinationElementIndex = getIndex(dragging, Array.from(dragging.parentElement.children)\n        .filter(item => item !== placeholder))\n      const destinationIndex = getIndex(dragging, destinationItems)\n\n      if (options.dropTargetContainerClass) {\n        destinationContainer.classList.remove(options.dropTargetContainerClass)\n      }\n\n      /*\n       * When a list item changed container lists or index within a list\n       * Fires Custom Event - 'sortupdate'\n       */\n      if (originElementIndex !== destinationElementIndex || originContainer !== destinationContainer) {\n        sortableElement.dispatchEvent(new CustomEvent('sortupdate', {\n          detail: {\n            origin: {\n              elementIndex: originElementIndex,\n              index: originIndex,\n              container: originContainer,\n              itemsBeforeUpdate: originItemsBeforeUpdate,\n              items: originItems\n            },\n            destination: {\n              index: destinationIndex,\n              elementIndex: destinationElementIndex,\n              container: destinationContainer,\n              itemsBeforeUpdate: destinationItemsBeforeUpdate,\n              items: destinationItems\n            },\n            item: dragging\n          }\n        }))\n      }\n    })\n\n    const debouncedDragOverEnter = debounce((sortableElement, element, pageX, pageY) => {\n      if (!dragging) {\n        return\n      }\n\n      // set placeholder height if forcePlaceholderSize option is set\n      if (options.forcePlaceholderSize) {\n        store(sortableElement).placeholder.style.height = draggingHeight + 'px'\n        store(sortableElement).placeholder.style.width = draggingWidth + 'px'\n      }\n      // if element the draggedItem is dragged onto is within the array of all elements in list\n      // (not only items, but also disabled, etc.)\n      if (Array.from(sortableElement.children).indexOf(element) > -1) {\n        const thisHeight = getElementHeight(element)\n        const thisWidth = getElementWidth(element)\n        const placeholderIndex = getIndex(store(sortableElement).placeholder, element.parentElement.children)\n        const thisIndex = getIndex(element, element.parentElement.children)\n        // Check if `element` is bigger than the draggable. If it is, we have to define a dead zone to prevent flickering\n        if (thisHeight > draggingHeight || thisWidth > draggingWidth) {\n          // Dead zone?\n          const deadZoneVertical = thisHeight - draggingHeight\n          const deadZoneHorizontal = thisWidth - draggingWidth\n          const offsetTop = offset(element).top\n          const offsetLeft = offset(element).left\n          if (placeholderIndex < thisIndex &&\n              ((options.orientation === 'vertical' && pageY < offsetTop) ||\n                  (options.orientation === 'horizontal' && pageX < offsetLeft))) {\n            return\n          }\n          if (placeholderIndex > thisIndex &&\n              ((options.orientation === 'vertical' && pageY > offsetTop + thisHeight - deadZoneVertical) ||\n                  (options.orientation === 'horizontal' && pageX > offsetLeft + thisWidth - deadZoneHorizontal))) {\n            return\n          }\n        }\n\n        if (dragging.oldDisplay === undefined) {\n          dragging.oldDisplay = dragging.style.display\n        }\n\n        if (dragging.style.display !== 'none') {\n          dragging.style.display = 'none'\n        }\n        // To avoid flicker, determine where to position the placeholder\n        // based on where the mouse pointer is relative to the elements\n        // vertical center.\n        let placeAfter = false\n        try {\n          const elementMiddleVertical = offset(element).top + element.offsetHeight / 2\n          const elementMiddleHorizontal = offset(element).left + element.offsetWidth / 2\n          placeAfter = (options.orientation === 'vertical' && (pageY >= elementMiddleVertical)) ||\n              (options.orientation === 'horizontal' && (pageX >= elementMiddleHorizontal))\n        } catch (e) {\n          placeAfter = placeholderIndex < thisIndex\n        }\n\n        if (placeAfter) {\n          after(element, store(sortableElement).placeholder)\n        } else {\n          before(element, store(sortableElement).placeholder)\n        }\n        // get placeholders from all stores & remove all but current one\n        Array.from(stores.values())\n          // remove empty values\n          .filter(data => data.placeholder !== undefined)\n          // foreach placeholder in array if outside of current sorableContainer -> remove from DOM\n          .forEach((data) => {\n            if (data.placeholder !== store(sortableElement).placeholder) {\n              data.placeholder.remove()\n            }\n          })\n      } else {\n        // get all placeholders from store\n        const placeholders = Array.from(stores.values())\n          .filter((data) => data.placeholder !== undefined)\n          .map((data) => {\n            return data.placeholder\n          })\n        // check if element is not in placeholders\n        if (placeholders.indexOf(element) === -1 && sortableElement === element && !filter(element.children, options.items).length) {\n          placeholders.forEach((element) => element.remove())\n          element.appendChild(store(sortableElement).placeholder)\n        }\n      }\n    }, options.debounce)\n    // Handle dragover and dragenter events on draggable items\n    const onDragOverEnter = function (e) {\n      let element = e.target\n      const sortableElement = element.isSortable === true ? element : findSortable(element, e)\n      element = findDragElement(sortableElement, element)\n      if (!dragging || !listsConnected(sortableElement, dragging.parentElement) || data(sortableElement, '_disabled') === 'true') {\n        return\n      }\n      const options = data(sortableElement, 'opts')\n      if (parseInt(options.maxItems) && filter(sortableElement.children, data(sortableElement, 'items')).length >= parseInt(options.maxItems) && dragging.parentElement !== sortableElement) {\n        return\n      }\n      e.preventDefault()\n      e.stopPropagation()\n      e.dataTransfer.dropEffect = store(sortableElement).getConfig('copy') === true ? 'copy' : 'move'\n      debouncedDragOverEnter(sortableElement, element, e.pageX, e.pageY)\n    }\n\n    on(listItems.concat(sortableElement), 'dragover', onDragOverEnter)\n    on(listItems.concat(sortableElement), 'dragenter', onDragOverEnter)\n  })\n\n  return sortableElements\n}\n\nsortable.destroy = function (sortableElement) {\n  destroySortable(sortableElement)\n}\n\nsortable.enable = function (sortableElement) {\n  enableSortable(sortableElement)\n}\n\nsortable.disable = function (sortableElement) {\n  disableSortable(sortableElement)\n}\n\n/* START.TESTS_ONLY */\nsortable.__testing = {\n  // add internal methods here for testing purposes\n  data,\n  removeItemEvents,\n  removeItemData,\n  removeSortableData,\n  removeContainerEvents\n}\n/* END.TESTS_ONLY */\n","/**\n * make sure a function is only called once within the given amount of time\n * @param {Function} fn the function to throttle\n * @param {number} threshold time limit for throttling\n */\n// must use function to keep this context\nexport default function (fn: Function, threshold: number = 250) {\n  // check function\n  if (typeof fn !== 'function') {\n    throw new Error('You must provide a function as the first argument for throttle.')\n  }\n  // check threshold\n  if (typeof threshold !== 'number') {\n    throw new Error('You must provide a number as the second argument for throttle.')\n  }\n\n  let lastEventTimestamp = null\n\n  return (...args) => {\n    const now = Date.now()\n    if (lastEventTimestamp === null || now - lastEventTimestamp >= threshold) {\n      lastEventTimestamp = now\n      fn.apply(this, args)\n    }\n  }\n}\n"],"names":["addData","element","key","value","undefined","h5s","data","filter","nodes","selector","NodeList","HTMLCollection","Array","Error","from","item","nodeType","matches","stores","Map","Store","this","_config","_placeholder","_data","Object","defineProperty","prototype","get","config","forEach","set","mergedConfig","assign","entries","setConfig","has","getConfig","placeholder","HTMLElement","setData","getData","deleteData","delete","store","sortableElement","addEventListener","eventName","callback","i","length","concat","removeEventListener","addAttribute","attribute","setAttribute","removeAttribute","offset","parentElement","getClientRects","rect","left","window","pageXOffset","right","top","pageYOffset","bottom","debounce","func","wait","timeout","args","_i","arguments","clearTimeout","setTimeout","apply","getIndex","elementList","indexOf","isInDom","parentNode","insertNode","referenceNode","newElement","position","insertBefore","nextElementSibling","target","insertAfter","serialize","sortableContainer","customItemSerializer","customContainerSerializer","serializedItem","serializedContainer","isSortable","items","children","serializedItems","map","parent","node","html","outerHTML","index","container","itemCount","makePlaceholder","placeholderClass","includes","tagName","document","createElement","innerHTML","_a","classList","add","split","getElementHeight","style","getComputedStyle","getPropertyValue","parseInt","int","isNaN","reduce","sum","getElementWidth","getHandles","querySelector","shadowRoot","getEventTarget","event","composedPath","defaultDragImage","draggedElement","elementOffset","posX","pageX","posY","pageY","setDragImage","customDragImage","Event","dragImage","dataTransfer","effectAllowed","id","offsetX","offsetY","listsConnected","destination","origin","acceptFrom","sel","defaultConfiguration","connectWith","disableIEFix","copy","draggingClass","hoverClass","dropTargetContainerClass","throttleTime","maxItems","itemSerializer","containerSerializer","orientation","dragging","draggingHeight","draggingWidth","originContainer","originIndex","originElementIndex","originItemsBeforeUpdate","previousContainer","destinationItemsBeforeUpdate","enableHoverClass","enable","hoverClasses_1","fn","threshold","_this","lastEventTimestamp","now","Date","throttle","buttons","contains","_b","remove","removeItemEvents","off","removeStoreData","removeContainerEvents","getDragging","draggedItem","sortable","ditem","attr","cloneNode","appendChild","display","oldDisplay","removeSortableData","removeAttr","removeItemData","findSortable","find","el","findDragElement","options","itemlist","ele","enableSortable","opts","handles","handle","dragDrop","on","reloadSortable","sortableElements","method","String","querySelectorAll","slice","call","test","configKey","hasOwnProperty","console","warn","customPlaceholder","listItems","tempContainer","e","stopImmediatePropagation","getAttribute","dragItem","error","dispatchEvent","CustomEvent","detail","elementIndex","originalTarget","itemsBeforeUpdate","outTarget","relatedTarget","fromElement","currentTarget","visiblePlaceholder","values","preventDefault","stopPropagation","replaceWith","originItems","destinationContainer","destinationItems","destinationElementIndex","destinationIndex","debouncedDragOverEnter","forcePlaceholderSize","height","width","thisHeight","thisWidth","placeholderIndex","thisIndex","deadZoneVertical","deadZoneHorizontal","offsetTop","offsetLeft","placeAfter","elementMiddleVertical","offsetHeight","elementMiddleHorizontal","offsetWidth","after","before","placeholders","onDragOverEnter","dropEffect","destroy","disable","__testing"],"mappings":"qCAQA,SAASA,EAASC,EAAsBC,EAAaC,GACnD,QAAcC,IAAVD,EACF,OAAOF,GAAWA,EAAQI,KAAOJ,EAAQI,IAAIC,MAAQL,EAAQI,IAAIC,KAAKJ,GAEtED,EAAQI,IAAMJ,EAAQI,KAAO,GAC7BJ,EAAQI,IAAIC,KAAOL,EAAQI,IAAIC,MAAQ,GACvCL,EAAQI,IAAIC,KAAKJ,GAAOC,ECP5B,IAAAI,EAAe,SAACC,EAAmDC,GACjE,KAAMD,aAAiBE,UAAYF,aAAiBG,gBAAkBH,aAAiBI,OACrF,MAAM,IAAIC,MAAM,gFAElB,MAAwB,iBAAbJ,EACFG,MAAME,KAAKN,GAGbI,MAAME,KAAKN,GAAOD,OAAO,SAACQ,GAAS,OAAkB,IAAlBA,EAAKC,UAAkBD,EAAKE,QAAQR,MCZnES,EAAkC,IAAIC,IAMnDC,EAAA,WAAA,SAAAA,IACUC,KAAAC,QAA4B,IAAIH,IAChCE,KAAAE,kBAA6BnB,EAC7BiB,KAAAG,MAA0B,IAAIL,IAwHxC,OAlHEM,OAAAC,eAAIN,EAAMO,UAAA,SAAA,CAeVC,IAAA,WAEE,IAAMC,EAAS,GAKf,OAJAR,KAAKC,QAAQQ,QAAQ,SAAC3B,EAAOD,GAC3B2B,EAAO3B,GAAOC,IAGT0B,GAtBTE,IAAA,SAAYF,GACV,GAAsB,iBAAXA,EACT,MAAM,IAAIhB,MAAM,uEAGlB,IAAMmB,EAAeP,OAAOQ,OAAO,GAAIJ,GAEvCR,KAAKC,QAAU,IAAIH,IAAIM,OAAOS,QAAQF,qCAyBxCZ,EAAAO,UAAAQ,UAAA,SAAWjC,EAAaC,GACtB,IAAKkB,KAAKC,QAAQc,IAAIlC,GACpB,MAAM,IAAIW,MAAM,oDAA6CX,IAG/DmB,KAAKC,QAAQS,IAAI7B,EAAKC,IASxBiB,EAASO,UAAAU,UAAT,SAAWnC,GACT,IAAKmB,KAAKC,QAAQc,IAAIlC,GACpB,MAAM,IAAIW,MAAM,gDAAyCX,IAE3D,OAAOmB,KAAKC,QAAQM,IAAI1B,IAQ1BuB,OAAAC,eAAIN,EAAWO,UAAA,cAAA,CAAfC,IAAA,WACE,OAAOP,KAAKE,cASdQ,IAAA,SAAiBO,GACf,KAAMA,aAAuBC,cAAgC,OAAhBD,EAC3C,MAAM,IAAIzB,MAAM,kDAElBQ,KAAKE,aAAee,mCAUtBlB,EAAAO,UAAAa,QAAA,SAAStC,EAAaC,GACpB,GAAmB,iBAARD,EACT,MAAM,IAAIW,MAAM,6BAElBQ,KAAKG,MAAMO,IAAI7B,EAAKC,IAStBiB,EAAOO,UAAAc,QAAP,SAASvC,GACP,GAAmB,iBAARA,EACT,MAAM,IAAIW,MAAM,6BAElB,OAAOQ,KAAKG,MAAMI,IAAI1B,IASxBkB,EAAUO,UAAAe,WAAV,SAAYxC,GACV,GAAmB,iBAARA,EACT,MAAM,IAAIW,MAAM,6BAElB,OAAOQ,KAAKG,MAAMmB,OAAOzC,IAE5BkB,KAKDwB,EAAA,SAAgBC,GAEd,KAAMA,aAA2BN,aAC/B,MAAM,IAAI1B,MAAM,oDAOlB,OAJKK,EAAOkB,IAAIS,IACd3B,EAAOa,IAAIc,EAAiB,IAAIzB,GAG3BF,EAAOU,IAAIiB,IC7IpB,SAASC,EAAkB7C,EAAyC8C,EAAkBC,GACpF,GAAI/C,aAAmBW,MACrB,IAAK,IAAIqC,EAAI,EAAGA,EAAIhD,EAAQiD,SAAUD,EACpCH,EAAiB7C,EAAQgD,GAAIF,EAAWC,QAI5C/C,EAAQ6C,iBAAiBC,EAAWC,GACpCJ,EAAM3C,GAASuC,QAAQ,QAAQW,OAAAJ,GAAaC,GAM9C,SAASI,EAAqBnD,EAAyC8C,GACrE,GAAI9C,aAAmBW,MACrB,IAAK,IAAIqC,EAAI,EAAGA,EAAIhD,EAAQiD,SAAUD,EACpCG,EAAoBnD,EAAQgD,GAAIF,QAIpC9C,EAAQmD,oBAAoBL,EAAWH,EAAM3C,GAASwC,QAAQ,QAAAU,OAAQJ,KACtEH,EAAM3C,GAASyC,WAAW,QAAQS,OAAAJ,ICvBpC,SAASM,EAAcpD,EAAyCqD,EAAkBnD,GAChF,GAAIF,aAAmBW,MACrB,IAAK,IAAIqC,EAAI,EAAGA,EAAIhD,EAAQiD,SAAUD,EACpCI,EAAapD,EAAQgD,GAAIK,EAAWnD,QAIxCF,EAAQsD,aAAaD,EAAWnD,GAMlC,SAASqD,EAAiBvD,EAAyCqD,GACjE,GAAIrD,aAAmBW,MACrB,IAAK,IAAIqC,EAAI,EAAGA,EAAIhD,EAAQiD,SAAUD,EACpCO,EAAgBvD,EAAQgD,GAAIK,QAIhCrD,EAAQuD,gBAAgBF,GCrB1B,IAAAG,EAAA,SAAgBxD,GACd,IAAKA,EAAQyD,eAAqD,IAApCzD,EAAQ0D,iBAAiBT,OACrD,MAAM,IAAIrC,MAAM,0CAGlB,IAAM+C,EAAO3D,EAAQ0D,iBAAiB,GACtC,MAAO,CACLE,KAAMD,EAAKC,KAAOC,OAAOC,YACzBC,MAAOJ,EAAKI,MAAQF,OAAOC,YAC3BE,IAAKL,EAAKK,IAAMH,OAAOI,YACvBC,OAAQP,EAAKO,OAASL,OAAOI,cCRjCE,EAAe,SAACC,EAAgBC,GAC9B,IAAIC,EACJ,YAF8B,IAAAD,IAAAA,EAAgB,GAEvC,eAAC,IAAOE,EAAA,GAAAC,EAAA,EAAPA,EAAOC,UAAAxB,OAAPuB,IAAAD,EAAOC,GAAAC,UAAAD,GACbE,aAAaJ,GACbA,EAAUK,WAAW,WACnBP,EAAIQ,WAAA,EAAIL,IACPF,KCNPQ,EAAe,SAAC7E,EAAsB8E,GACpC,KAAM9E,aAAmBsC,cAAkBwC,aAAuBrE,UAAYqE,aAAuBpE,gBAAkBoE,aAAuBnE,QAC5I,MAAM,IAAIC,MAAM,uDAGlB,OAAOD,MAAME,KAAKiE,GAAaC,QAAQ/E,ICLzCgF,EAAA,SAAgBhF,GACd,KAAMA,aAAmBsC,aACvB,MAAM,IAAI1B,MAAM,kCAGlB,OAA8B,OAAvBZ,EAAQiF,YCJXC,EAAa,SAACC,EAA4BC,EAAyBC,GACvE,KAAMF,aAAyB7C,aAAkB6C,EAAc1B,yBAAyBnB,aACtF,MAAM,IAAI1B,MAAM,qCAElBuE,EAAc1B,cAAc6B,aAC1BF,EACc,WAAbC,EAAwBF,EAAgBA,EAAcI,qBAQrDD,EAAe,SAACE,EAAqBxF,GAAyB,OAAAkF,EAAWM,EAAQxF,EAAS,WAM1FyF,EAAc,SAACD,EAAqBxF,GAAyB,OAAAkF,EAAWM,EAAQxF,EAAS,UCjB/F0F,EAAA,SAAgBC,EAAgCC,EAAqHC,GAEnK,QAF8C,IAAAD,IAAAA,WAAkCE,EAAgCH,GAAmC,OAAAG,SAAgB,IAAAD,IAAAA,EAAuC,SAAAE,GAAgC,OAAAA,MAEpOJ,aAA6BrD,eAAkD,IAAjCqD,EAAkBK,WACpE,MAAM,IAAIpF,MAAM,6DAGlB,GAAoC,mBAAzBgF,GAA4E,mBAA9BC,EACvD,MAAM,IAAIjF,MAAM,uEAGlB,IAEME,EAFUf,EAAQ4F,EAAmB,QAEJM,MAGjCA,EAAQ3F,EAAOqF,EAAkBO,SAAUpF,GAC3CqF,EAAoCF,EAAMG,IAAI,SAACtF,GACnD,MAAO,CACLuF,OAAQV,EACRW,KAAMxF,EACNyF,KAAMzF,EAAK0F,UACXC,MAAO5B,EAAS/D,EAAMmF,MAS1B,MAAO,CACLS,UAAWb,EANK,CAChBS,KAAMX,EACNgB,UAAWR,EAAgBlD,SAK3BgD,MAAOE,EAAgBC,IAAI,SAACtF,GAAiB,OAAA8E,EAAqB9E,EAAM6E,OCnC5EiB,EAAA,SAAgBhE,EAA8BP,EAA2BwE,SACvE,QADuE,IAAAA,IAAAA,EAAiD,0BAClHjE,aAA2BN,aAC/B,MAAM,IAAI1B,MAAM,mDAGlB,KAAMyB,aAAuBC,mBAAgCnC,IAAhBkC,EAC3C,MAAM,IAAIzB,MAAM,6EAmBlB,YAhBoBT,IAAhBkC,IACE,CAAC,KAAM,MAAMyE,SAASlE,EAAgBmE,SACxC1E,EAAc2E,SAASC,cAAc,MAC5B,CAAC,QAAS,SAASH,SAASlE,EAAgBmE,UACrD1E,EAAc2E,SAASC,cAAc,OAEzBC,UAAY,0BAExB7E,EAAc2E,SAASC,cAAc,QAIT,iBAArBJ,IACTM,EAAA9E,EAAY+E,WAAUC,IAAOzC,MAAAuC,EAAAN,EAAiBS,MAAM,MAG/CjF,GC3BTkF,EAAA,SAAgBvH,GACd,KAAMA,aAAmBsC,aACvB,MAAM,IAAI1B,MAAM,wCAGlB,IAAM4G,EAAQ3D,OAAO4D,iBAAiBzH,GAEtC,MAA6C,eAAzCwH,EAAME,iBAAiB,cAClBC,SAASH,EAAME,iBAAiB,UAAW,IAG7C,CAAC,SAAU,cAAe,kBAC9BtB,IAAI,SAACnG,GACJ,IAAM2H,EAAMD,SAASH,EAAME,iBAAiBzH,GAAM,IAClD,OAAO4H,MAAMD,GAAO,EAAIA,IAEzBE,OAAO,SAACC,EAAK7H,GAAU,OAAA6H,EAAM7H,KChBlC8H,EAAA,SAAgBhI,GACd,KAAMA,aAAmBsC,aACvB,MAAM,IAAI1B,MAAM,wCAGlB,IAAM4G,EAAQ3D,OAAO4D,iBAAiBzH,GAEtC,MAAO,CAAC,QAAS,eAAgB,iBAC9BoG,IAAI,SAACnG,GACJ,IAAM2H,EAAMD,SAASH,EAAME,iBAAiBzH,GAAM,IAClD,OAAO4H,MAAMD,GAAO,EAAIA,IAEzBE,OAAO,SAACC,EAAK7H,GAAU,OAAA6H,EAAM7H,KCVlC+H,EAAe,SAAChC,EAA2BzF,GACzC,KAAMyF,aAAiBtF,OACrB,MAAM,IAAIC,MAAM,4DAGlB,MAAwB,iBAAbJ,EACFyF,EAGFA,EAEJ3F,OAAO,SAACQ,GACP,OAAOA,EAAKoH,cAAc1H,aAAqB8B,aAC5CxB,EAAKqH,YAAcrH,EAAKqH,WAAWD,cAAc1H,aAAqB8B,cAG1E8D,IAAI,SAACtF,GACJ,OAAOA,EAAKoH,cAAc1H,IAAcM,EAAKqH,YAAcrH,EAAKqH,WAAWD,cAAc1H,MCpB/F4H,EAAA,SAAgBC,GACd,OAAQA,EAAMC,cAAgBD,EAAMC,eAAe,IAAOD,EAAM7C,QCK5D+C,EAAmB,SAACC,EAA6BC,EAA6BJ,GAClF,MAAO,CACLrI,QAASwI,EACTE,KAAML,EAAMM,MAAQF,EAAc7E,KAClCgF,KAAMP,EAAMQ,MAAQJ,EAAczE,MAUtC8E,EAAA,SAAgBT,EAAkBG,EAA6BO,GAE7D,KAAMV,aAAiBW,OACrB,MAAM,IAAIpI,MAAM,4DAGlB,KAAM4H,aAA0BlG,aAC9B,MAAM,IAAI1B,MAAM,qEAOlB,GAJKmI,IACHA,EAAkBR,GAGhBQ,aAA2BzG,YAAa,CAC1C,IAAMmG,EAAgBjF,EAAOuF,GACvBE,EAAY,CAChBjJ,QAAS+I,EACTL,KAAML,EAAMM,MAAQF,EAAc7E,KAClCgF,KAAMP,EAAMQ,MAAQJ,EAAczE,KAGpCqE,EAAMa,aAAaC,cAAgB,WACnCd,EAAMa,aAAa3G,QAAQ,aAAc6F,EAAeC,GAAOe,IAC/Df,EAAMa,aAAaJ,aAAaG,EAAUjJ,QAASqI,EAAMgB,QAAShB,EAAMiB,cACnE,GAA+B,mBAApBP,GAAkCV,EAAMa,aAAaJ,aAAc,CAOnF,MAFMG,EAAYF,EAAgBP,EAF5BC,EAAgBjF,EAAOgF,GAEoCH,IAEjDrI,mBAAmBsC,cAA0C,iBAAnB2G,EAAUP,MAA+C,iBAAnBO,EAAUL,KACxG,MAAM,IAAIhI,MAAM,uIAGlByH,EAAMa,aAAaC,cAAgB,WAEnCd,EAAMa,aAAa3G,QAAQ,aAAc6F,EAAeC,GAAOe,IAE/Df,EAAMa,aAAaJ,aAAaG,EAAUjJ,QAASiJ,EAAUP,KAAMO,EAAUL,QC1DjFW,EAAe,SAACC,EAAuBC,GAErC,IAA+B,IAA3BD,EAAYxD,WAAqB,CACnC,IAAM0D,EAAa/G,EAAM6G,GAAapH,UAAU,cAEhD,GAAmB,OAAfsH,IAAsC,IAAfA,GAA8C,iBAAfA,EACxD,MAAM,IAAI9I,MAAM,oGAGlB,GAAmB,OAAf8I,EACF,OAAsB,IAAfA,GAEK,EAFmBA,EAAWpC,MAAM,KAAKhH,OAAO,SAAUqJ,GACpE,OAAoB,EAAbA,EAAI1G,QAAcwG,EAAOzI,QAAQ2I,KACvC1G,OAGL,GAAIuG,IAAgBC,EAClB,OAAO,EAGT,QAAoDtJ,IAAhDwC,EAAM6G,GAAapH,UAAU,gBAAgF,OAAhDO,EAAM6G,GAAapH,UAAU,eAC5F,OAAOO,EAAM6G,GAAapH,UAAU,iBAAmBO,EAAM8G,GAAQrH,UAAU,eAGnF,OAAO,GC1BMwH,EAAA,CACb3D,MAAO,KAEP4D,YAAa,KAEbC,aAAc,KACdJ,WAAY,KACZK,MAAM,EACN1H,YAAa,KACbwE,iBAAkB,uBAClBmD,cAAe,oBACfC,YAAY,EACZC,0BAA0B,EAC1B/F,SAAU,EACVgG,aAAc,IACdC,SAAU,EACVC,oBAAgBlK,EAChBmK,yBAAqBnK,EACrB4I,gBAAiB,KACjBwB,YAAa,YCZf,ICiBIC,EACAC,EACAC,EAQAC,EACAC,EACAC,EACAC,EAIAC,EAGAC,EDrCJC,EAAe,SAACtF,EAA6BuF,GAC3C,GAAgE,iBAArDvI,EAAMgD,GAAmBvD,UAAU,cAA4B,CACxE,IAAM+I,EAAexI,EAAMgD,GAAmBvD,UAAU,cAAckF,MAAM,MAE7D,IAAX4D,GACFrI,EAAiB8C,EAAmB,YETjB,SAAAyF,EAAcC,GAAvC,IAmBCC,EAAAlK,KAjBC,QAFqC,IAAAiK,IAAAA,EAAuB,KAE1C,mBAAPD,EACT,MAAM,IAAIxK,MAAM,mEAGlB,GAAyB,iBAAdyK,EACT,MAAM,IAAIzK,MAAM,kEAGlB,IAAI2K,EAAqB,KAEzB,OAAO,eAAC,IAAOhH,EAAA,GAAAC,EAAA,EAAPA,EAAOC,UAAAxB,OAAPuB,IAAAD,EAAOC,GAAAC,UAAAD,GACb,IAAMgH,EAAMC,KAAKD,OACU,OAAvBD,GAA2DF,GAA5BG,EAAMD,KACvCA,EAAqBC,EACrBJ,EAAGxG,MAAM0G,EAAM/G,KFPkCmH,CAAS,SAACrD,GAEnC,IAAlBA,EAAMsD,SACRrL,EAAOqF,EAAkBO,SAAUvD,EAAMgD,GAAmBvD,UAAU,UAAUP,QAAQ,SAAAf,WAClFA,IAASuH,EAAM7C,QAAU1E,EAAK8K,SAASvD,EAAM7C,SAC/C2B,EAAArG,EAAKsG,WAAUC,IAAOzC,MAAAuC,EAAAgE,IAEtBU,EAAA/K,EAAKsG,WAAU0E,OAAUlH,MAAAiH,EAAAV,MAI9BxI,EAAMgD,GAAmBvD,UAAU,kBAEtCS,EAAiB8C,EAAmB,aAAc,WAChDrF,EAAOqF,EAAkBO,SAAUvD,EAAMgD,GAAmBvD,UAAU,UAAUP,QAAQ,SAAAf,UACtFqG,EAAArG,EAAKsG,WAAU0E,OAAUlH,MAAAuC,EAAAgE,SAK7BhI,EAAoBwC,EAAmB,aACvCxC,EAAoBwC,EAAmB,iBCiBvCoG,EAAmB,SAAU9F,GACjC+F,EAAI/F,EAAO,aACX+F,EAAI/F,EAAO,WACX+F,EAAI/F,EAAO,YACX+F,EAAI/F,EAAO,aACX+F,EAAI/F,EAAO,QACX+F,EAAI/F,EAAO,cACX+F,EAAI/F,EAAO,eAQPgG,EAAkB,SAAUhG,GAC5BA,aAAiBtF,OACnBsF,EAAMpE,QAAQ,SAAA7B,GAAW,OAAAiB,EAAOyB,OAAO1C,MAKrCkM,EAAwB,SAAUvB,EAAiBI,GACnDJ,GACFqB,EAAIrB,EAAiB,aAEnBI,GAAsBA,IAAsBJ,GAC9CqB,EAAIjB,EAAmB,cAWrBoB,EAAc,SAAUC,EAAaC,GACzC,IAAIC,EAAQF,EAQZ,OAP0C,IAAtCzJ,EAAM0J,GAAUjK,UAAU,UAE5BmK,EADAD,EAAQF,EAAYI,WAAU,GAClB,cAAe,QAC3BJ,EAAY3I,cAAcgJ,YAAYH,GACtCA,EAAM9E,MAAMkF,QAAU,OACtBJ,EAAMK,WAAaP,EAAY5E,MAAMkF,SAEhCJ,GAMHM,EAAqB,SAAUP,GpBrFrC,IAAqBrM,GAAAA,EoBsFRqM,GpBrFCjM,YACHJ,EAAQI,IAAIC,KoBqFrBwM,EAAWR,EAAU,oBAMjBS,EAAiB,SAAU7G,GAC/B4G,EAAW5G,EAAO,gBAClB4G,EAAW5G,EAAO,eAClB4G,EAAW5G,EAAO,aAClB4G,EAAW5G,EAAO,SAQpB,SAAS8G,EAAc/M,EAASqI,GAC9B,GAAIA,EAAMC,aACR,OAAOD,EAAMC,eAAe0E,KAAK,SAAAC,GAAM,OAAAA,EAAGjH,aAE5C,MAA8B,IAAvBhG,EAAQgG,YACbhG,EAAUA,EAAQyD,cAEpB,OAAOzD,EAQT,SAASkN,EAAiBtK,EAAiB5C,GACzC,IAAMmN,EAAU9M,EAAKuC,EAAiB,QAEhCwK,EADQ9M,EAAOsC,EAAgBsD,SAAUiH,EAAQlH,OAChC3F,OAAO,SAAU+M,GACtC,OAAOA,EAAIzB,SAAS5L,IAAaqN,EAAIlF,YAAckF,EAAIlF,WAAWyD,SAAS5L,KAG7E,OAAyB,EAAlBoN,EAASnK,OAAamK,EAAS,GAAKpN,EAM7C,IA4BMsN,EAAiB,SAAU1K,GAC/B,IAAM2K,EAAOlN,EAAKuC,EAAiB,QAC7BqD,EAAQ3F,EAAOsC,EAAgBsD,SAAUqH,EAAKtH,OAC9CuH,EAAUvF,EAAWhC,EAAOsH,EAAKE,SACvClB,EAAK3J,EAAiB,kBAAmB,QACzCvC,EAAKuC,EAAiB,YAAa,SACnC2J,EAAKiB,EAAS,YAAa,QAE3BvC,EAAiBrI,GAAiB,IAKR,IAAtB2K,EAAKzD,gBAEwB,mBADf9C,UAAYnD,OAAOmD,UAAUC,cAAc,QACzCyG,UAChBC,EAAGH,EAAS,YAAa,WACvB,IAA6B,IAAzBvH,EAAMlB,QAAQ3D,MAChBA,KAAKsM,eACA,CAEL,IADA,IAAIrH,EAASjF,KAAKqC,eACgB,IAA3BwC,EAAMlB,QAAQsB,IACnBA,EAASA,EAAO5C,cAElB4C,EAAOqH,gBAyBXE,EAAiB,SAAUhL,GAC/B,IAAM2K,EAAOlN,EAAKuC,EAAiB,QAC7BqD,EAAQ3F,EAAOsC,EAAgBsD,SAAUqH,EAAKtH,OAC9CuH,EAAUvF,EAAWhC,EAAOsH,EAAKE,QACvCpN,EAAKuC,EAAiB,YAAa,SAEnCmJ,EAAiB9F,GACjBiG,EAAsBvB,EAAiBI,GACvCiB,EAAIwB,EAAS,aAEbxB,EAAIpJ,EAAiB,YACrBoJ,EAAIpJ,EAAiB,aACrBoJ,EAAIpJ,EAAiB,SAQT,SAAUyJ,EAAUwB,EAAkBV,GAElD,IAAMW,EAASC,OAAOZ,GAatB,OAZAA,EAAUA,GAAW,GAEW,iBAArBU,IACTA,EAAmB7G,SAASgH,iBAAiBH,IAG3CA,aAA4BvL,cAC9BuL,EAAmB,CAACA,IAGtBA,EAAmBlN,MAAMe,UAAUuM,MAAMC,KAAKL,GAE1C,YAAYM,KAAKL,GACZD,EAAiBzH,IAAI,SAACT,GAC3B,IAAM4H,EAAOlN,EAAKsF,EAAmB,QACrC,OAAOD,EAAUC,EAAmB4H,EAAKlD,eAAgBkD,EAAKjD,wBAIlEuD,EAAiBhM,QAAQ,SAAUe,GACjC,GAAI,yBAAyBuL,KAAKL,GAChC,OAAOzB,EAASyB,GAAQlL,GAG1B,CAAC,cAAe,gBAAgBf,QAAQ,SAACuM,GACnC5M,OAAOE,UAAU2M,eAAeH,KAAKf,EAASiB,IAAqC,OAAvBjB,EAAQiB,IACtEE,QAAQC,KAAK,qEAA8DH,EAAS,6GAIxFjB,EAAU3L,OAAOQ,OAAO,GAAI4H,EAAsBjH,EAAMC,GAAiBhB,OAAQuL,GAEjFxK,EAAMC,GAAiBhB,OAASuL,EAEhC9M,EAAKuC,EAAiB,OAAQuK,GAE9BvK,EAAgBoD,YAAa,EAE7B4H,EAAehL,GAEf,IAEI4L,EAFEC,EAAYnO,EAAOsC,EAAgBsD,SAAUiH,EAAQlH,OAG3D,GAA4B,OAAxBkH,EAAQ9K,kBAAgDlC,IAAxBgN,EAAQ9K,YAA2B,CACrE,IAAMqM,EAAgB1H,SAASC,cAAcrE,EAAgBmE,SACzDoG,EAAQ9K,uBAAuBC,YACjCoM,EAAcjC,YAAYU,EAAQ9K,aAElCqM,EAAcxH,UAAYiG,EAAQ9K,YAEpCmM,EAAoBE,EAAcxI,SAAS,GAG7CvD,EAAMC,GAAiBP,YAAcuE,EAAgBhE,EAAiB4L,EAAmBrB,EAAQtG,kBAEjGxG,EAAKuC,EAAiB,QAASuK,EAAQlH,OAEnCkH,EAAQzD,WACVrJ,EAAKuC,EAAiB,aAAcuK,EAAQzD,YACnCyD,EAAQtD,aACjBxJ,EAAKuC,EAAiB,cAAeuK,EAAQtD,aAG/CyD,EAAe1K,GACf2J,EAAKkC,EAAW,OAAQ,UACxBlC,EAAKkC,EAAW,eAAgB,SAMhCd,EAAG/K,EAAiB,YAAa,SAAU+L,GAEzC,IAAMnJ,EAAS4C,EAAeuG,GAC9B,IAA0B,IAAtBnJ,EAAOQ,aAGX2I,EAAEC,6BAEGzB,EAAQM,QAAWjI,EAAOxE,QAAQmM,EAAQM,UAAiD,UAArCjI,EAAOqJ,aAAa,cAA/E,CAIA,IAAMlJ,EAAoBoH,EAAavH,EAAQmJ,GACzCG,EAAW5B,EAAgBvH,EAAmBH,GAGpDsF,EAA0BxK,EAAOqF,EAAkBO,SAAUiH,EAAQlH,OACrE2E,EAAcE,EAAwB/F,QAAQ+J,GAC9CjE,EAAqBhG,EAASiK,EAAUnJ,EAAkBO,UAC1DyE,EAAkBhF,EAGlB,IAAIsD,EAAgC,KACG,iBAA5BkE,EAAQpE,gBAEjBE,OADAA,EAAYjC,SAASkB,cAAciF,EAAQpE,mBAC9BuF,QAAQS,MAAM,8DACU,aAA5B5B,EAAQpE,kBACjBE,EAAYkE,EAAQpE,iBAEtBD,EAAa6F,EAAGG,EAAU7F,GAE1BwB,EAAiBlD,EAAiBuH,GAClCpE,EAAgB1C,EAAgB8G,GAChCA,EAAS1H,UAAUC,IAAI8F,EAAQnD,eAE/BuC,EADA/B,EAAW2B,EAAY2C,EAAUnJ,GAClB,eAAgB,QAG/BA,EAAkBqJ,cAAc,IAAIC,YAAY,YAAa,CAC3DC,OAAQ,CACNzF,OAAQ,CACN0F,aAActE,EACdpE,MAAOmE,EACPlE,UAAWiE,GAEb7J,KAAM0J,EACN4E,eAAgB5J,SAQtBmI,EAAG/K,EAAiB,YAAa,SAAC+L,GAChC,IAAMnJ,EAAS4C,EAAeuG,GACxBhJ,EAAoBoH,EAAavH,EAAQmJ,GAE3ChJ,GAAqBA,IAAsBoF,IAC7CC,EAA+B1K,EAAOqF,EAAkBO,SAAU7F,EAAKsF,EAAmB,UACvFrF,OAAO,SAAAQ,GAAQ,OAAAA,IAAS6B,EAAMC,GAAiBP,cAE9C8K,EAAQjD,0BACVvE,EAAkByB,UAAUC,IAAI8F,EAAQjD,0BAE1CvE,EAAkBqJ,cAAc,IAAIC,YAAY,YAAa,CAC3DC,OAAQ,CACNzF,OAAQ,CACN0F,aAActE,EACdpE,MAAOmE,EACPlE,UAAWiE,GAEbnB,YAAa,CACX9C,UAAWf,EACX0J,kBAAmBrE,GAErBlK,KAAM0J,EACN4E,eAAgB5J,MAIpBmI,EAAGhI,EAAmB,YAAa,SAAAgJ,GAGjC,IAAMW,EAAYX,EAAEY,eAAiBZ,EAAEa,YAClCb,EAAEc,cAAc7D,SAAS0D,KACxBnC,EAAQjD,0BACVvE,EAAkByB,UAAU0E,OAAOqB,EAAQjD,0BAE7CvE,EAAkBqJ,cAAc,IAAIC,YAAY,YAAa,CAC3DC,OAAQ,CACNzF,OAAQ,CACN0F,aAActE,EACdpE,MAAOmE,EACPlE,UAAWf,GAEb7E,KAAM0J,EACN4E,eAAgB5J,UAM1BuF,EAAoBpF,IAQtBgI,EAAG/K,EAAiB,UAAW,SAAU+L,GACvC,GAAKnE,EAAL,CAIAA,EAASpD,UAAU0E,OAAOqB,EAAQnD,eAClCuC,EAAK/B,EAAU,eAAgB,SAEc,SAAzCA,EAASqE,aAAa,gBAA2D,SAA9BxO,EAAKmK,EAAU,YACpEA,EAASsB,cAEiB3L,IAAxBqK,EAASmC,aACXnC,EAAShD,MAAMkF,QAAUlC,EAASmC,kBAC3BnC,EAASmC,YAElB,IAAM+C,EAAqB/O,MAAME,KAAKI,EAAO0O,UAAUvJ,IAAI,SAAA/F,GAAQ,OAAAA,EAAKgC,cACrE/B,OAAO,SAAA+B,GAAe,OAAAA,aAAuBC,cAC7ChC,OAAO0E,GAAS,GAEf0K,GACFA,EAAmB5D,SAIrBlJ,EAAgBoM,cAAc,IAAIC,YAAY,WAAY,CACxDC,OAAQ,CACNzF,OAAQ,CACN0F,aAActE,EACdpE,MAAOmE,EACPlE,UAAWiE,GAEb7J,KAAM0J,MAOVE,EADAD,EADAD,EADAO,EAAoB,QAUtB4C,EAAG/K,EAAiB,OAAQ,SAAU+L,GACpC,GAAKpF,EAAe3G,EAAiB4H,EAAS/G,eAA9C,CAGAkL,EAAEiB,iBACFjB,EAAEkB,kBAEFxP,EAAKmK,EAAU,UAAW,QAE1B,IAAMkF,EAAqB/O,MAAME,KAAKI,EAAO0O,UAAUvJ,IAAI,SAAC/F,GAC1D,OAAOA,EAAKgC,cAGX/B,OAAO,SAAA+B,GAAe,OAAAA,aAAuBC,cAE7ChC,OAAO0E,GAAS,GACnB,GAAI0K,EAAJ,CACEA,EAAmBI,YAAYtF,QAEHrK,IAAxBqK,EAASmC,aACXnC,EAAShD,MAAMkF,QAAUlC,EAASmC,kBAC3BnC,EAASmC,YAUpB/J,EAAgBoM,cAAc,IAAIC,YAAY,WAAY,CACxDC,OAAQ,CACNzF,OAAQ,CACN0F,aAActE,EACdpE,MAAOmE,EACPlE,UAAWiE,GAEb7J,KAAM0J,MAIV,IAAMnI,EAAcM,EAAMC,GAAiBP,YACrC0N,EAAczP,EAAOqK,EAAgBzE,SAAUiH,EAAQlH,OAC1D3F,OAAO,SAAAQ,GAAQ,OAAAA,IAASuB,IACrB2N,GAA2C,IAApB5O,KAAK4E,WAAsB5E,KAAOA,KAAKqC,cAC9DwM,EAAmB3P,EAAO0P,EAAqB9J,SAAU7F,EAAK2P,EAAsB,UACvF1P,OAAO,SAAAQ,GAAQ,OAAAA,IAASuB,IACrB6N,EAA0BrL,EAAS2F,EAAU7J,MAAME,KAAK2J,EAAS/G,cAAcyC,UAClF5F,OAAO,SAAAQ,GAAQ,OAAAA,IAASuB,KACrB8N,EAAmBtL,EAAS2F,EAAUyF,GAExC9C,EAAQjD,0BACV8F,EAAqB5I,UAAU0E,OAAOqB,EAAQjD,0BAO5CW,IAAuBqF,GAA2BvF,IAAoBqF,GACxEpN,EAAgBoM,cAAc,IAAIC,YAAY,aAAc,CAC1DC,OAAQ,CACNzF,OAAQ,CACN0F,aAActE,EACdpE,MAAOmE,EACPlE,UAAWiE,EACX0E,kBAAmBvE,EACnB7E,MAAO8J,GAETvG,YAAa,CACX/C,MAAO0J,EACPhB,aAAce,EACdxJ,UAAWsJ,EACXX,kBAAmBrE,EACnB/E,MAAOgK,GAETnP,KAAM0J,WApDVnK,EAAKmK,EAAU,UAAW,YA0D9B,IAAM4F,EAAyBjM,EAAS,SAACvB,EAAiB5C,EAAS2I,EAAOE,GACxE,GAAK2B,EAWL,GANI2C,EAAQkD,uBACV1N,EAAMC,GAAiBP,YAAYmF,MAAM8I,OAAS7F,EAAiB,KACnE9H,EAAMC,GAAiBP,YAAYmF,MAAM+I,MAAQ7F,EAAgB,OAIN,EAAzD/J,MAAME,KAAK+B,EAAgBsD,UAAUnB,QAAQ/E,GAAe,CAC9D,IAAMwQ,EAAajJ,EAAiBvH,GAC9ByQ,EAAYzI,EAAgBhI,GAC5B0Q,EAAmB7L,EAASlC,EAAMC,GAAiBP,YAAarC,EAAQyD,cAAcyC,UACtFyK,EAAY9L,EAAS7E,EAASA,EAAQyD,cAAcyC,UAE1D,GAAiBuE,EAAb+F,GAA2C9F,EAAZ+F,EAA2B,CAE5D,IAAMG,EAAmBJ,EAAa/F,EAChCoG,EAAqBJ,EAAY/F,EACjCoG,EAAYtN,EAAOxD,GAASgE,IAC5B+M,EAAavN,EAAOxD,GAAS4D,KACnC,GAAI8M,EAAmBC,IACO,aAAxBxD,EAAQ5C,aAA8B1B,EAAQiI,GACnB,eAAxB3D,EAAQ5C,aAAgC5B,EAAQoI,GACvD,OAEF,GAAuBJ,EAAnBD,IAC0B,aAAxBvD,EAAQ5C,aAAsCuG,EAAYN,EAAaI,EAAjC/H,GACX,eAAxBsE,EAAQ5C,aAAwCwG,EAAaN,EAAYI,EAAjClI,GAC/C,YAIwBxI,IAAxBqK,EAASmC,aACXnC,EAASmC,WAAanC,EAAShD,MAAMkF,SAGR,SAA3BlC,EAAShD,MAAMkF,UACjBlC,EAAShD,MAAMkF,QAAU,QAK3B,IAAIsE,GAAa,EACjB,IACE,IAAMC,EAAwBzN,EAAOxD,GAASgE,IAAMhE,EAAQkR,aAAe,EACrEC,EAA0B3N,EAAOxD,GAAS4D,KAAO5D,EAAQoR,YAAc,EAC7EJ,EAAsC,aAAxB7D,EAAQ5C,aAAwC0G,GAATpI,GACxB,eAAxBsE,EAAQ5C,aAA0C4G,GAATxI,EAC9C,MAAOgG,GACPqC,EAAaN,EAAmBC,EAG9BK,EACFK,EAAMrR,EAAS2C,EAAMC,GAAiBP,aAEtCiP,EAAOtR,EAAS2C,EAAMC,GAAiBP,aAGzC1B,MAAME,KAAKI,EAAO0O,UAEfrP,OAAO,SAAAD,GAAQ,YAAqBF,IAArBE,EAAKgC,cAEpBR,QAAQ,SAACxB,GACJA,EAAKgC,cAAgBM,EAAMC,GAAiBP,aAC9ChC,EAAKgC,YAAYyJ,eAGlB,CAEL,IAAMyF,EAAe5Q,MAAME,KAAKI,EAAO0O,UACpCrP,OAAO,SAACD,GAAS,YAAqBF,IAArBE,EAAKgC,cACtB+D,IAAI,SAAC/F,GACJ,OAAOA,EAAKgC,eAGuB,IAAnCkP,EAAaxM,QAAQ/E,IAAmB4C,IAAoB5C,GAAYM,EAAON,EAAQkG,SAAUiH,EAAQlH,OAAOhD,SAClHsO,EAAa1P,QAAQ,SAAC7B,GAAY,OAAAA,EAAQ8L,WAC1C9L,EAAQyM,YAAY9J,EAAMC,GAAiBP,gBAG9C8K,EAAQhJ,UAELqN,EAAkB,SAAU7C,GAChC,IAAI3O,EAAU2O,EAAEnJ,OACV5C,GAAyC,IAAvB5C,EAAQgG,WAAsBhG,EAAU+M,EAAa/M,EAAS2O,GAEtF,GADA3O,EAAUkN,EAAgBtK,EAAiB5C,GACtCwK,GAAajB,EAAe3G,EAAiB4H,EAAS/G,gBAAyD,SAAvCpD,EAAKuC,EAAiB,aAAnG,CAGA,IAAMuK,EAAU9M,EAAKuC,EAAiB,QAClC+E,SAASwF,EAAQ/C,WAAa9J,EAAOsC,EAAgBsD,SAAU7F,EAAKuC,EAAiB,UAAUK,QAAU0E,SAASwF,EAAQ/C,WAAaI,EAAS/G,gBAAkBb,IAGtK+L,EAAEiB,iBACFjB,EAAEkB,kBACFlB,EAAEzF,aAAauI,YAA0D,IAA7C9O,EAAMC,GAAiBR,UAAU,QAAmB,OAAS,OACzFgO,EAAuBxN,EAAiB5C,EAAS2O,EAAEhG,MAAOgG,EAAE9F,UAG9D8E,EAAGc,EAAUvL,OAAON,GAAkB,WAAY4O,GAClD7D,EAAGc,EAAUvL,OAAON,GAAkB,YAAa4O,KAG9C3D,UAGTxB,EAASqF,QAAU,SAAU9O,GAxgBL,IAAUA,EAC1B2K,EACAtH,EACAuH,EAFAD,EAAOlN,EADmBuC,EAygBhBA,EAxgBmB,SAAW,GACxCqD,EAAQ3F,EAAOsC,EAAgBsD,SAAUqH,EAAKtH,OAC9CuH,EAAUvF,EAAWhC,EAAOsH,EAAKE,QAEvCxC,EAAiBrI,GAAiB,GAElCoJ,EAAIpJ,EAAiB,YACrBoJ,EAAIpJ,EAAiB,aACrBoJ,EAAIpJ,EAAiB,aACrBoJ,EAAIpJ,EAAiB,WACrBoJ,EAAIpJ,EAAiB,QAErBgK,EAAmBhK,GAEnBoJ,EAAIwB,EAAS,aACbzB,EAAiB9F,GACjB6G,EAAe7G,GACfgG,EAAgBhG,GAChBgG,EAAgB,CAACrJ,IACjBsJ,EAAsBvB,EAAiBI,GAEvCnI,EAAgBoD,YAAa,GAsf/BqG,EAASnB,OAAS,SAAUtI,GAC1B0K,EAAe1K,IAGjByJ,EAASsF,QAAU,SAAU/O,GAldL,IAAUA,EAC1B2K,EACAtH,EACAuH,EAFAD,EAAOlN,EADmBuC,EAmdhBA,EAldmB,QAC7BqD,EAAQ3F,EAAOsC,EAAgBsD,SAAUqH,EAAKtH,OAC9CuH,EAAUvF,EAAWhC,EAAOsH,EAAKE,QACvClB,EAAK3J,EAAiB,kBAAmB,QACzCvC,EAAKuC,EAAiB,YAAa,QACnC2J,EAAKiB,EAAS,YAAa,SAC3BxB,EAAIwB,EAAS,aACbvC,EAAiBrI,GAAiB,IA+cpCyJ,EAASuF,UAAY,CAEnBvR,KAAIA,EACJ0L,iBAAgBA,EAChBe,eAAcA,EACdF,mBAAkBA,EAClBV,sBAAqBA"}