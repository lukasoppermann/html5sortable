{"version":3,"file":"html5sortable.min.js","sources":["../src/data.ts","../src/filter.ts","../src/eventListener.ts","../src/attribute.ts","../src/offset.ts","../src/index.ts","../src/isInDom.ts","../src/insertHtmlElements.ts","../src/html5sortable.ts","../src/debounce.ts"],"sourcesContent":["/**\n * Get or set data on element\n * @param {Element} element\n * @param {string} key\n * @param {*} value\n * @return {*}\n */\nfunction addData (element, key, value) {\n  if (value === undefined) {\n    return element && element.h5s && element.h5s.data && element.h5s.data[key]\n  } else {\n    element.h5s = element.h5s || {}\n    element.h5s.data = element.h5s.data || {}\n    element.h5s.data[key] = value\n  }\n}\n/**\n * Remove data from element\n * @param {Element} element\n */\nfunction removeData (element) {\n  if (element.h5s) {\n    delete element.h5s.data\n  }\n}\n\nexport { addData, removeData }\n","/* global HTMLCollection, NodeList */\n/**\n * Filter only wanted nodes\n * @param {NodeList|HTMLCollection} nodes\n * @param {String} selector\n * @returns {Array}\n */\nexport default (nodes, selector) => {\n  if (!(nodes instanceof NodeList || nodes instanceof HTMLCollection)) {\n    throw new Error('You must provide a nodeList/HTMLCollection of elements to be filtered.')\n  }\n  if (typeof selector !== 'string') {\n    return Array.from(nodes)\n  }\n\n  return Array.from(nodes).filter((item) => item.nodeType === 1 && item.matches(selector))\n}\n","/**\n * @param {Array|Element} element\n * @param {Array|string} event\n * @param {Function} callback\n */\nfunction addEventListener (element, event, callback) {\n  if (element instanceof Array) {\n    for (var i = 0; i < element.length; ++i) {\n      addEventListener(element[i], event, callback)\n    }\n    return\n  }\n  element.addEventListener(event, callback)\n  element.h5s = element.h5s || {}\n  element.h5s.events = element.h5s.events || {}\n  element.h5s.events[event] = callback\n}\n/**\n * @param {Array|Element} element\n * @param {Array|string} event\n */\nfunction removeEventListener (element, event) {\n  if (element instanceof Array) {\n    for (var i = 0; i < element.length; ++i) {\n      removeEventListener(element[i], event)\n    }\n    return\n  }\n  if (element.h5s && element.h5s.events && element.h5s.events[event]) {\n    element.removeEventListener(event, element.h5s.events[event])\n    delete element.h5s.events[event]\n  }\n}\n\nexport { addEventListener, removeEventListener }\n","/**\n * @param {Array|Element} element\n * @param {string} attribute\n * @param {*} value\n */\nfunction addAttribute (element, attribute, value) {\n  if (element instanceof Array) {\n    for (var i = 0; i < element.length; ++i) {\n      addAttribute(element[i], attribute, value)\n    }\n    return\n  }\n  element.setAttribute(attribute, value)\n}\n/**\n * @param {Array|Element} element\n * @param {string} attribute\n */\nfunction removeAttribute (element, attribute) {\n  if (element instanceof Array) {\n    for (var i = 0; i < element.length; ++i) {\n      removeAttribute(element[i], attribute)\n    }\n    return\n  }\n  element.removeAttribute(attribute)\n}\n\nexport { addAttribute, removeAttribute }\n","/**\n * @param {Element} element\n * @returns {Object}\n */\nexport default (element: Element): object => {\n  if (!element.parentElement) {\n    throw new Error('target element must be part of the dom')\n  }\n\n  let rect = element.getClientRects()[0]\n  return {\n    left: rect.left + window.scrollX,\n    right: rect.right + window.scrollX,\n    top: rect.top + window.scrollY,\n    bottom: rect.bottom + window.scrollY\n  }\n}\n","/**\n * Get position of the element relatively to its sibling elements\n * @param {Element} element\n * @returns {number}\n */\nexport default (element: Element): number => {\n  if (!element.parentElement) {\n    return -1\n  }\n  return Array.prototype.indexOf.call(element.parentElement.children, element)\n}\n","/**\n * Test whether element is in DOM\n * @param {Element} element\n * @returns {boolean}\n */\nexport default (element: Element): boolean => {\n  if (!element || element.nodeType !== 1) {\n    throw new Error('Element is not a node element.')\n  }\n\n  return element.parentNode !== null\n}\n","/**\n * Insert node before or after target\n * @param {Element} referenceNode - reference element\n * @param {Element} newElement - element to be inserted\n * @param {String} position - insert before or after reference element\n */\nlet insertNode = (referenceNode: any, newElement: any, position: String = 'before') => {\n  if ((referenceNode || {}).nodeType !== 1 || !referenceNode.parentElement || (newElement || {}).nodeType !== 1) {\n    throw new Error('target and element must be a node')\n  }\n  referenceNode.parentElement.insertBefore(\n    newElement,\n    (position === 'before' ? referenceNode : referenceNode.nextElementSibling)\n  )\n}\n/**\n * Insert before target\n * @param {Element} target\n * @param {Element} element\n */\nlet insertBefore = (target, element) => insertNode(target, element, 'before')\n/**\n * Insert after target\n * @param {Element} target\n * @param {Element} element\n */\nlet insertAfter = (target, element) => insertNode(target, element, 'after')\n\nexport { insertBefore, insertAfter }\n","'use strict'\n\nimport { addData as _data, removeData as _removeData } from './data'\nimport _filter from './filter'\nimport { addEventListener as _on, removeEventListener as _off } from './eventListener'\nimport { addAttribute as _attr, removeAttribute as _removeAttr } from './attribute'\nimport _offset from './offset'\nimport _debounce from './debounce'\nimport _index from './index'\nimport isInDom from './isInDom'\nimport {insertBefore as _before, insertAfter as _after} from './insertHtmlElements'\n/*\n * variables global to the plugin\n */\nvar dragging\nvar draggingHeight\nvar placeholderMap = new Map()\n/*\n * remove event handlers from items\n * @param {Array|NodeList} items\n */\nvar _removeItemEvents = function (items) {\n  _off(items, 'dragstart')\n  _off(items, 'dragend')\n  _off(items, 'selectstart')\n  _off(items, 'dragover')\n  _off(items, 'dragenter')\n  _off(items, 'drop')\n  _off(items, 'mouseenter')\n  _off(items, 'mouseleave')\n}\n/*\n * Remove event handlers from sortable\n * @param {Element} sortable a single sortable\n */\nvar _removeSortableEvents = function (sortable) {\n  _off(sortable, 'dragover')\n  _off(sortable, 'dragenter')\n  _off(sortable, 'drop')\n}\n/*\n * Attach ghost to dataTransfer object\n * @param {Event} original event\n * @param {object} ghost-object with item, x and y coordinates\n */\nlet _makePlaceholder = (sortableElement, placeholder = undefined, placeholderClasses = 'sortable-placeholder') => {\n  if (typeof placeholder === 'string') {\n    let tempContainer = document.createElement(sortableElement.tagName)\n    tempContainer.innerHTML = placeholder\n    placeholder = tempContainer.children[0]\n  } else {\n    switch (sortableElement.tagName) {\n      case 'UL':\n        placeholder = 'li'\n        break\n      case 'OL':\n        placeholder = 'li'\n        break\n      case 'TABLE':\n        placeholder = 'tr'\n        break\n      case 'TBODY':\n        placeholder = 'tr'\n        break\n      default:\n        placeholder = 'div'\n    }\n    placeholder = document.createElement(placeholder)\n  }\n  // add classes to placeholder\n  placeholder.classList.add(...placeholderClasses.split(' '))\n\n  return placeholder\n}\n/*\n * Attach ghost to dataTransfer object\n * @param {Event} original event\n * @param {object} ghost-object with item, x and y coordinates\n */\nvar _attachGhost = function (event, ghost) {\n  // this needs to be set for HTML5 drag & drop to work\n  event.dataTransfer.effectAllowed = 'copyMove'\n  // Firefox requires some arbitrary content in the data in order for\n  // the drag & drop functionality to work\n  event.dataTransfer.setData('text', 'arbitrary-content')\n\n  // check if setDragImage method is available\n  if (event.dataTransfer.setDragImage) {\n    event.dataTransfer.setDragImage(ghost.draggedItem, ghost.x, ghost.y)\n  }\n}\n/**\n * _addGhostPos clones the dragged item and adds it as a Ghost item\n * @param {Event} event - the event fired when dragstart is triggered\n * @param {object} ghost - .draggedItem = Element\n */\nvar _addGhostPos = function (event, ghost) {\n  if (!ghost.x) {\n    ghost.x = parseInt(event.pageX - _offset(ghost.draggedItem).left)\n  }\n  if (!ghost.y) {\n    ghost.y = parseInt(event.pageY - _offset(ghost.draggedItem).top)\n  }\n  return ghost\n}\n/**\n * _makeGhost decides which way to make a ghost and passes it to attachGhost\n * @param {Element} draggedItem - the item that the user drags\n */\nvar _makeGhost = function (draggedItem) {\n  return {\n    draggedItem: draggedItem\n  }\n}\n/**\n * _getGhost constructs ghost and attaches it to dataTransfer\n * @param {Event} event - the original drag event object\n * @param {Element} draggedItem - the item that the user drags\n */\n// TODO: could draggedItem be replaced by event.target in all instances\nvar _getGhost = function (event, draggedItem) {\n  // add ghost item & draggedItem to ghost object\n  var ghost = _makeGhost(draggedItem)\n  // attach ghost position\n  ghost = _addGhostPos(event, ghost)\n  // attach ghost to dataTransfer\n  _attachGhost(event, ghost)\n}\n/**\n * _getDragging returns the current element to drag or\n * a copy of the element.\n * Is Copy Active for sortable\n * @param {Element} draggedItem - the item that the user drags\n * @param {Element} sortable a single sortable\n */\nvar _getDragging = function (draggedItem, sortable) {\n  var ditem = draggedItem\n  if (_isCopyActive(sortable)) {\n    ditem = draggedItem.cloneNode(true)\n    _attr(ditem, 'aria-copied', 'true')\n    draggedItem.parentElement.appendChild(ditem)\n    ditem.style.display = 'none'\n    ditem.oldDisplay = draggedItem.style.display\n  }\n  return ditem\n}\n/*\n * Remove data from sortable\n * @param {Element} sortable a single sortable\n */\nvar _removeSortableData = function (sortable) {\n  _removeData(sortable)\n  _removeAttr(sortable, 'aria-dropeffect')\n}\n/*\n * Remove data from items\n * @param {Array|Element} items\n */\nvar _removeItemData = function (items) {\n  _removeAttr(items, 'aria-grabbed')\n  _removeAttr(items, 'aria-copied')\n  _removeAttr(items, 'draggable')\n  _removeAttr(items, 'role')\n}\n/*\n * Check if two lists are connected\n * @param {Element} curList\n * @param {Element} destList\n */\nvar _listsConnected = function (curList, destList) {\n  if (_isSortable(curList)) {\n    var acceptFrom = _data(curList, 'opts').acceptFrom\n    if (acceptFrom !== null) {\n      return acceptFrom !== false && acceptFrom.split(',').filter(function (sel) {\n        return sel.length > 0 && destList.matches(sel)\n      }).length > 0\n    }\n    if (curList === destList) {\n      return true\n    }\n    if (_data(curList, 'connectWith') !== undefined) {\n      return _data(curList, 'connectWith') === _data(destList, 'connectWith')\n    }\n  }\n  return false\n}\n/*\n * Is Copy Active for sortable\n * @param {Element} sortable a single sortable\n */\nvar _isCopyActive = function (sortable) {\n  return _data(sortable, 'opts').copy === true\n}\n/*\n * Get height of an element including padding\n * @param {Element} sortable a single sortable\n */\nlet _getElementHeight = (element) => {\n  // get calculated style of element\n  let style = window.getComputedStyle(element)\n  // pick applicable properties, convert to int and reduce by adding\n  return ['height', 'padding-top', 'padding-bottom']\n    .map((key) => {\n      let int = parseInt(style.getPropertyValue(key), 10)\n      return isNaN(int) ? 0 : int\n    })\n    .reduce((prev, cur) => prev + cur)\n}\n/*\n * get handle or return item\n * @param {Array} items\n * @param {selector} handle\n */\nvar _getHandles = function (items, handle) {\n  var result = []\n  var handles\n  if (!handle) {\n    return items\n  }\n  for (var i = 0; i < items.length; ++i) {\n    handles = items[i].querySelectorAll(handle)\n    result = result.concat(Array.prototype.slice.call(handles))\n  }\n  return result\n}\n/**\n * Is {Element} a sortable.\n * @param {Element} sortable a single sortable\n */\nfunction _isSortable (element) {\n  return element !== undefined && element != null && _data(element, 'opts') !== undefined\n}\n/**\n * find sortable from element. travels up parent element until found or null.\n * @param {Element} sortable a single sortable\n */\nfunction findSortable (element) {\n  while ((element = element.parentElement) && !_isSortable(element));\n  return element\n}\n/**\n * Dragging event is on the sortable element. finds the top child that\n * contains the element.\n * @param {Element} sortable a single sortable\n * @param {Element} element is that being dragged\n */\nfunction findDragElement (sortableElement, element) {\n  var options = _data(sortableElement, 'opts')\n  var items = _filter(sortableElement.children, options.items)\n  var itemlist = items.filter(function (ele) {\n    return ele.contains(element)\n  })\n\n  return itemlist.length > 0 ? itemlist[0] : element\n}\n/*\n * Destroy the sortable\n * @param {Element} sortableElement a single sortable\n */\nvar _destroySortable = function (sortableElement) {\n  var opts = _data(sortableElement, 'opts') || {}\n  var items = _filter(sortableElement.children, opts.items)\n  var handles = _getHandles(items, opts.handle)\n  // remove event handlers & data from sortable\n  _removeSortableEvents(sortableElement)\n  _removeSortableData(sortableElement)\n  // remove event handlers & data from items\n  _off(handles, 'mousedown')\n  _removeItemEvents(items)\n  _removeItemData(items)\n}\n/*\n * Enable the sortable\n * @param {Element} sortableElement a single sortable\n */\nvar _enableSortable = function (sortableElement) {\n  var opts = _data(sortableElement, 'opts')\n  var items = _filter(sortableElement.children, opts.items)\n  var handles = _getHandles(items, opts.handle)\n  _attr(sortableElement, 'aria-dropeffect', 'move')\n  _data(sortableElement, '_disabled', 'false')\n  _attr(handles, 'draggable', 'true')\n  // IE FIX for ghost\n  // can be disabled as it has the side effect that other events\n  // (e.g. click) will be ignored\n  var spanEl = (document || window.document).createElement('span')\n  if (typeof spanEl.dragDrop === 'function' && !opts.disableIEFix) {\n    _on(handles, 'mousedown', function () {\n      if (items.indexOf(this) !== -1) {\n        this.dragDrop()\n      } else {\n        var parent = this.parentElement\n        while (items.indexOf(parent) === -1) {\n          parent = parent.parentElement\n        }\n        parent.dragDrop()\n      }\n    })\n  }\n}\n/*\n * Disable the sortable\n * @param {Element} sortableElement a single sortable\n */\nvar _disableSortable = function (sortableElement) {\n  var opts = _data(sortableElement, 'opts')\n  var items = _filter(sortableElement.children, opts.items)\n  var handles = _getHandles(items, opts.handle)\n  _attr(sortableElement, 'aria-dropeffect', 'none')\n  _data(sortableElement, '_disabled', 'true')\n  _attr(handles, 'draggable', 'false')\n  _off(handles, 'mousedown')\n}\n/*\n * Reload the sortable\n * @param {Element} sortableElement a single sortable\n * @description events need to be removed to not be double bound\n */\nvar _reloadSortable = function (sortableElement) {\n  var opts = _data(sortableElement, 'opts')\n  var items = _filter(sortableElement.children, opts.items)\n  var handles = _getHandles(items, opts.handle)\n  _data(sortableElement, '_disabled', 'false')\n  // remove event handlers from items\n  _removeItemEvents(items)\n  _off(handles, 'mousedown')\n  // remove event handlers from sortable\n  _removeSortableEvents(sortableElement)\n}\n/**\n * Make native event that can be dispatched afterwards\n * @param {string} name\n * @param {object} detail\n * @returns {CustomEvent}\n */\nvar _makeEvent = function (name, detail) {\n  var e = document.createEvent('Event')\n  if (detail) {\n    e.detail = detail\n  }\n  e.initEvent(name, false, true)\n  return e\n}\n\nvar _serialize = function (list) {\n  var children = _filter(list.children, _data(list, 'items'))\n  return children\n}\n\n/*\n * Public sortable object\n * @param {Array|NodeList} sortableElements\n * @param {object|string} options|method\n */\nexport default function sortable (sortableElements, options) {\n  var method = String(options)\n  options = (function (options) {\n    var result = {\n      connectWith: false,\n      acceptFrom: null,\n      copy: false,\n      placeholder: null,\n      disableIEFix: false,\n      placeholderClass: 'sortable-placeholder',\n      draggingClass: 'sortable-dragging',\n      hoverClass: false,\n      debounce: 0,\n      maxItems: 0\n    }\n    for (var option in options) {\n      result[option] = options[option]\n    }\n    return result\n  })(options)\n\n  if (typeof sortableElements === 'string') {\n    sortableElements = document.querySelectorAll(sortableElements)\n  }\n\n  if (sortableElements instanceof window.Element) {\n    sortableElements = [sortableElements]\n  }\n\n  sortableElements = Array.prototype.slice.call(sortableElements)\n\n  if (/serialize/.test(method)) {\n    var serialized = []\n    sortableElements.forEach(function (sortableElement) {\n      serialized.push({\n        list: sortableElement,\n        children: _serialize(sortableElement)\n      })\n    })\n    return serialized\n  }\n\n  /* TODO: maxstatements should be 25, fix and remove line below */\n  /* jshint maxstatements:false */\n  sortableElements.forEach(function (sortableElement) {\n    if (/enable|disable|destroy/.test(method)) {\n      return sortable[method](sortableElement)\n    }\n\n    // get options & set options on sortable\n    options = _data(sortableElement, 'opts') || options\n    _data(sortableElement, 'opts', options)\n    // reset sortable\n    _reloadSortable(sortableElement)\n    // initialize\n    var items = _filter(sortableElement.children, options.items)\n    var index\n    var startParent\n    var startList\n    let placeholder = _makePlaceholder(sortableElement, options.placeholder, options.placeholderClass)\n\n    _data(sortableElement, 'items', options.items)\n    placeholderMap.set(sortableElement, placeholder)\n    if (options.acceptFrom) {\n      _data(sortableElement, 'acceptFrom', options.acceptFrom)\n    } else if (options.connectWith) {\n      _data(sortableElement, 'connectWith', options.connectWith)\n    }\n\n    _enableSortable(sortableElement)\n    _attr(items, 'role', 'option')\n    _attr(items, 'aria-grabbed', 'false')\n\n    // Mouse over class\n    if (typeof options.hoverClass === 'string') {\n      let hoverClasses = options.hoverClass.split(' ')\n      // add class on hover\n      _on(items, 'mouseenter', function (e) {\n        e.target.classList.add(...hoverClasses)\n      })\n      // remove class on leave\n      _on(items, 'mouseleave', function (e) {\n        e.target.classList.remove(...hoverClasses)\n      })\n    }\n\n    // Handle drag events on draggable items\n    // Handle set at sortableelement level as it will bubble up\n    // from the item\n    _on(sortableElement, 'dragstart', function (e) {\n      // ignore dragstart events\n      if (_isSortable(e.target)) {\n        return\n      }\n      e.stopImmediatePropagation()\n\n      if ((options.handle && !e.target.matches(options.handle)) || e.target.getAttribute('draggable') === 'false') {\n        return\n      }\n\n      var sortableElement = findSortable(e.target)\n      var dragitem = findDragElement(sortableElement, e.target)\n      // add transparent clone or other ghost to cursor\n      _getGhost(e, dragitem)\n      // cache selsection & add attr for dragging\n      draggingHeight = _getElementHeight(dragitem)\n      dragitem.classList.add(options.draggingClass)\n      dragging = _getDragging(dragitem, sortableElement)\n      _attr(dragging, 'aria-grabbed', 'true')\n      // grab values\n      index = _index(dragging)\n      startParent = findSortable(e.target)\n      startList = _serialize(startParent)\n      // dispatch sortstart event on each element in group\n      sortableElement.dispatchEvent(_makeEvent('sortstart', {\n        item: dragging,\n        placeholder: placeholderMap.get(sortableElement),\n        startparent: startParent\n      }))\n    })\n    // Handle drag events on draggable items\n    _on(sortableElement, 'dragend', function (e) {\n      var newParent\n      if (!dragging) {\n        return\n      }\n      var sortableElement = findSortable(e.target)\n      // remove dragging attributes and show item\n      dragging.classList.remove(options.draggingClass)\n      _attr(dragging, 'aria-grabbed', 'false')\n\n      if (dragging.getAttribute('aria-copied') === 'true' && _data(dragging, 'dropped') !== 'true') {\n        dragging.remove()\n      }\n\n      dragging.style.display = dragging.oldDisplay\n      delete dragging.oldDisplay\n\n      placeholderMap.forEach((element) => element.remove())\n      newParent = this.parentElement\n\n      if (_listsConnected(newParent, startParent)) {\n        sortableElement.dispatchEvent(_makeEvent('sortstop', {\n          item: dragging,\n          startparent: startParent\n        }))\n        if (index !== _index(dragging) || startParent !== newParent) {\n          sortableElement.dispatchEvent(_makeEvent('sortupdate', {\n            item: dragging,\n            index: _filter(newParent.children, _data(newParent, 'items'))\n              .indexOf(dragging),\n            oldindex: items.indexOf(dragging),\n            elementIndex: _index(dragging),\n            oldElementIndex: index,\n            startparent: startParent,\n            endparent: newParent,\n            newEndList: _serialize(newParent),\n            newStartList: _serialize(startParent),\n            oldStartList: startList\n          }))\n        }\n      }\n      dragging = null\n      draggingHeight = null\n    })\n    // Handle drop event on sortable & placeholder\n    _on(sortableElement, 'drop', function (e) {\n      if (!_listsConnected(sortableElement, dragging.parentElement)) {\n        return\n      }\n      e.preventDefault()\n      e.stopPropagation()\n\n      _data(dragging, 'dropped', 'true')\n      var visiblePlaceholder = Array.from(placeholderMap.values()).filter(isInDom)[0]\n      _after(visiblePlaceholder, dragging)\n    })\n\n    var debouncedDragOverEnter = _debounce((sortableElement, element, pageY) => {\n      if (!dragging) {\n        return\n      }\n\n      var placeholder = placeholderMap.get(sortableElement)\n      // set placeholder height if forcePlaceholderSize option is set\n      if (options.forcePlaceholderSize) {\n        placeholder.style.height = draggingHeight + 'px'\n      }\n\n      var items = _filter(sortableElement.children, options.items)\n      if (items.indexOf(element) !== -1) {\n        let thisHeight = _getElementHeight(element)\n        var placeholderIndex = _index(placeholder)\n        var thisIndex = _index(element)\n        // Check if `element` is bigger than the draggable. If it is, we have to define a dead zone to prevent flickering\n        if (thisHeight > draggingHeight) {\n          // Dead zone?\n          var deadZone = thisHeight - draggingHeight\n          var offsetTop = _offset(element).top\n          if (placeholderIndex < thisIndex &&\n              pageY < offsetTop + deadZone) {\n            return\n          }\n          if (placeholderIndex > thisIndex &&\n              pageY > offsetTop + thisHeight - deadZone) {\n            return\n          }\n        }\n\n        if (dragging.oldDisplay === undefined) {\n          dragging.oldDisplay = dragging.style.display\n        }\n\n        if (dragging.style.display !== 'none') {\n          dragging.style.display = 'none'\n        }\n        if (placeholderIndex < thisIndex) {\n          _after(element, placeholder)\n        } else {\n          _before(element, placeholder)\n        }\n        // Intentionally violated chaining, it is more complex otherwise\n        Array.from(placeholderMap.values())\n          .filter(function (element) { return element !== placeholder })\n          .forEach((element) => element.remove())\n      } else {\n        if (Array.from(placeholderMap.values()).indexOf(element) === -1 &&\n            sortableElement === element &&\n            !_filter(element.children, options.items).length) {\n          placeholderMap.forEach((element) => element.remove())\n          element.appendChild(placeholder)\n        }\n      }\n    }, options.debounce)\n    // Handle dragover and dragenter events on draggable items\n    var onDragOverEnter = function (e) {\n      var element = e.target\n      var sortableElement = _isSortable(element) ? element : findSortable(element)\n      element = findDragElement(sortableElement, element)\n      if (!dragging || !_listsConnected(sortableElement, dragging.parentElement) || _data(sortableElement, '_disabled') === 'true') {\n        return\n      }\n      var options = _data(sortableElement, 'opts')\n      if (parseInt(options.maxItems) && _filter(sortableElement.children, _data(sortableElement, 'items')).length >= parseInt(options.maxItems)) {\n        return\n      }\n      e.preventDefault()\n      e.stopPropagation()\n      e.dataTransfer.dropEffect = _isCopyActive(sortableElement) ? 'copy' : 'move'\n      debouncedDragOverEnter(sortableElement, element, e.pageY)\n    }\n\n    _on(items.concat(sortableElement), 'dragover', onDragOverEnter)\n    _on(items.concat(sortableElement), 'dragenter', onDragOverEnter)\n  })\n\n  return sortableElements\n}\n\nsortable.destroy = function (sortableElement) {\n  _destroySortable(sortableElement)\n}\n\nsortable.enable = function (sortableElement) {\n  _enableSortable(sortableElement)\n}\n\nsortable.disable = function (sortableElement) {\n  _disableSortable(sortableElement)\n}\n\n/* START.TESTS_ONLY */\nsortable.__testing = {\n  // add internal methods here for testing purposes\n  _data: _data,\n  _serialize: _serialize,\n  _removeSortableEvents: _removeSortableEvents,\n  _removeItemEvents: _removeItemEvents,\n  _removeItemData: _removeItemData,\n  _removeSortableData: _removeSortableData,\n  _listsConnected: _listsConnected,\n  _attachGhost: _attachGhost,\n  _addGhostPos: _addGhostPos,\n  _getGhost: _getGhost,\n  _getHandles: _getHandles,\n  _makeGhost: _makeGhost,\n  _index: _index,\n  _makeEvent: _makeEvent,\n  _getPlaceholders: () => placeholderMap,\n  _resetPlaceholders: () => {\n    placeholderMap.clear()\n  }\n}\n/* END.TESTS_ONLY */\n","/**\n * Creates and returns a new debounced version of the passed function which will postpone its execution until after wait milliseconds have elapsed\n * @param {func} Function to debounce\n * @param {wait} time to wait before calling function with latest arguments, 0 - no debounce\n * @returns {function} - debounced function\n */\nexport default (func, wait = 0) => {\n  let timeout\n\n  return (...args) => {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      func(...args)\n    }, wait)\n  }\n}\n"],"names":["element","key","value","undefined","h5s","data","nodes","selector","NodeList","HTMLCollection","Error","Array","from","filter","item","nodeType","matches","event","callback","i","length","addEventListener","events","removeEventListener","attribute","addAttribute","setAttribute","removeAttribute","parentElement","rect","getClientRects","left","window","scrollX","right","top","scrollY","bottom","prototype","indexOf","call","children","parentNode","dragging","draggingHeight","insertNode","referenceNode","newElement","position","insertBefore","nextElementSibling","target","insertAfter","placeholderMap","Map","_removeItemEvents","items","_off","_removeSortableEvents","sortable","_makePlaceholder","sortableElement","placeholder","placeholderClasses","tempContainer","document","createElement","tagName","innerHTML","classList","add","split","_getGhost","draggedItem","ghost","_makeGhost","dataTransfer","effectAllowed","setData","setDragImage","x","y","_attachGhost","parseInt","pageX","_offset","pageY","_addGhostPos","_getDragging","ditem","_isCopyActive","_attr","cloneNode","appendChild","style","display","oldDisplay","_listsConnected","curList","destList","_isSortable","acceptFrom","_data","sel","copy","_getElementHeight","getComputedStyle","map","int","getPropertyValue","isNaN","reduce","prev","cur","_getHandles","handle","handles","result","querySelectorAll","concat","slice","options","itemlist","_filter","ele","contains","_destroySortable","opts","_removeAttr","_removeItemData","_enableSortable","dragDrop","disableIEFix","_on","this","parent","_reloadSortable","_makeEvent","name","detail","e","createEvent","initEvent","_serialize","list","sortableElements","method","String","connectWith","placeholderClass","draggingClass","hoverClass","debounce","maxItems","option","Element","test","serialized","forEach","push","index","startParent","startList","set","hoverClasses_1","remove","stopImmediatePropagation","getAttribute","findSortable","dragitem","findDragElement","_index","dispatchEvent","get","startparent","newParent","oldindex","elementIndex","oldElementIndex","endparent","newEndList","newStartList","oldStartList","preventDefault","stopPropagation","visiblePlaceholder","values","isInDom","_after","func","wait","timeout","debouncedDragOverEnter","forcePlaceholderSize","height","thisHeight","placeholderIndex","thisIndex","deadZone","offsetTop","_before","_i","args","clearTimeout","setTimeout","onDragOverEnter","dropEffect","destroy","enable","disable","_disableSortable"],"mappings":"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"}