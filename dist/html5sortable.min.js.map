{"version":3,"file":"html5sortable.min.js","sources":["../src/data.ts","../src/filter.ts","../src/store.ts","../src/eventListener.ts","../src/attribute.ts","../src/offset.ts","../src/index.ts","../src/isInDom.ts","../src/insertHtmlElements.ts","../src/elementHeight.ts","../src/getHandles.ts","../src/setDragImage.ts","../src/isConnected.ts","../src/html5sortable.ts","../src/defaultConfiguration.ts","../src/hoverClass.ts","../src/throttle.ts","../src/serialize.ts","../src/makePlaceholder.ts","../src/debounce.ts"],"sourcesContent":["/**\n * Get or set data on element\n * @param {HTMLElement} element\n * @param {string} key\n * @param {any} value\n * @return {*}\n */\n\nfunction addData (element: HTMLElement, key: string, value?: any): HTMLElement|configuration|string|void {\n  if (value === undefined) {\n    return element && element.h5s && element.h5s.data && element.h5s.data[key]\n  } else {\n    element.h5s = element.h5s || {}\n    element.h5s.data = element.h5s.data || {}\n    element.h5s.data[key] = value\n  }\n}\n/**\n * Remove data from element\n * @param {HTMLElement} element\n */\nfunction removeData (element: HTMLElement) {\n  if (element.h5s) {\n    delete element.h5s.data\n  }\n}\n\nexport { addData, removeData }\n","/* eslint-env browser */\n/**\n * Filter only wanted nodes\n * @param {NodeList|HTMLCollection|Array} nodes\n * @param {String} selector\n * @returns {Array}\n */\nexport default (nodes: NodeList|HTMLCollection|Array<HTMLElement>, selector: string): Array<HTMLElement> => {\n  if (!(nodes instanceof NodeList || nodes instanceof HTMLCollection || nodes instanceof Array)) {\n    throw new Error('You must provide a nodeList/HTMLCollection/Array of elements to be filtered.')\n  }\n  if (typeof selector !== 'string') {\n    return Array.from(nodes)\n  }\n\n  return Array.from(nodes).filter((item) => item.nodeType === 1 && item.matches(selector))\n}\n","/* eslint-env browser */\nexport let stores: Map<HTMLElement, Store> = new Map()\n/**\n * Stores data & configurations per Sortable\n * @param {Object} config\n */\nexport class Store implements Store {\n  private _config: Map<string, any> = new Map() // eslint-disable-line no-undef\n  private _placeholder?: HTMLElement = undefined // eslint-disable-line no-undef\n  private _data: Map<string, any> = new Map() // eslint-disable-line no-undef\n  /**\n   * set the configuration of a class instance\n   * @method config\n   * @param {object} config object of configurations\n   */\n  set config (config: configuration) {\n    if (typeof config !== 'object') {\n      throw new Error('You must provide a valid configuration object to the config setter.')\n    }\n    // combine config with default\n    let mergedConfig = Object.assign({}, config)\n    // add config to map\n    this._config = new Map(Object.entries(mergedConfig))\n  }\n  /**\n   * get the configuration map of a class instance\n   * @method config\n   * @return {object}\n   */\n  get config (): configuration {\n    // transform Map to object\n    let config = {}\n    this._config.forEach((value, key) => {\n      config[key] = value\n    })\n    // return object\n    return config\n  }\n  /**\n   * set individual configuration of a class instance\n   * @method setConfig\n   * @param  key valid configuration key\n   * @param  value any value\n   * @return void\n   */\n  setConfig (key: string, value: any): void {\n    if (!this._config.has(key)) {\n      throw new Error(`Trying to set invalid configuration item: ${key}`)\n    }\n    // set config\n    this._config.set(key, value)\n  }\n  /**\n   * get an individual configuration of a class instance\n   * @method getConfig\n   * @param  key valid configuration key\n   * @return any configuration value\n   */\n  getConfig (key: string): any {\n    if (!this._config.has(key)) {\n      throw new Error(`Invalid configuration item requested: ${key}`)\n    }\n    return this._config.get(key)\n  }\n  /**\n   * get the placeholder for a class instance\n   * @method placeholder\n   * @return {HTMLElement|null}\n   */\n  get placeholder (): HTMLElement {\n    return this._placeholder\n  }\n  /**\n   * set the placeholder for a class instance\n   * @method placeholder\n   * @param {HTMLElement} placeholder\n   * @return {void}\n   */\n  set placeholder (placeholder: HTMLElement): void {\n    if (!(placeholder instanceof HTMLElement) && placeholder !== null) {\n      throw new Error('A placeholder must be an html element or null.')\n    }\n    this._placeholder = placeholder\n  }\n  /**\n   * set an data entry\n   * @method setData\n   * @param {string} key\n   * @param {any} value\n   * @return {void}\n   */\n  setData (key: string, value: Function): void {\n    if (typeof key !== 'string') {\n      throw new Error(`The key must be a string.`)\n    }\n    this._data.set(key, value)\n  }\n  /**\n   * get an data entry\n   * @method getData\n   * @param {string} key an existing key\n   * @return {any}\n   */\n  getData (key: string): any {\n    if (typeof key !== 'string') {\n      throw new Error(`The key must be a string.`)\n    }\n    return this._data.get(key)\n  }\n  /**\n   * delete an data entry\n   * @method deleteData\n   * @param {string} key an existing key\n   * @return {boolean}\n   */\n  deleteData (key: string): boolean {\n    if (typeof key !== 'string') {\n      throw new Error(`The key must be a string.`)\n    }\n    return this._data.delete(key)\n  }\n}\n/**\n * @param {HTMLElement} sortableElement\n * @returns {Class: Store}\n */\nexport default (sortableElement: HTMLElement): Store => {\n  // if sortableElement is wrong type\n  if (!(sortableElement instanceof HTMLElement)) {\n    throw new Error('Please provide a sortable to the store function.')\n  }\n  // create new instance if not avilable\n  if (!stores.has(sortableElement)) {\n    stores.set(sortableElement, new Store())\n  }\n  // return instance\n  return stores.get(sortableElement)\n}\n","import store from './store'\n/**\n * @param {Array|HTMLElement} element\n * @param {Function} callback\n * @param {string} event\n */\nfunction addEventListener (element: Array<HTMLElement>|HTMLElement, eventName:string, callback: () => void) {\n  if (element instanceof Array) {\n    for (var i = 0; i < element.length; ++i) {\n      addEventListener(element[i], eventName, callback)\n    }\n    return\n  }\n  element.addEventListener(eventName, callback)\n  store(element).setData(`event${eventName}`, callback)\n}\n/**\n * @param {Array<HTMLElement>|HTMLElement} element\n * @param {string} eventName\n */\nfunction removeEventListener (element: Array<HTMLElement>|HTMLElement, eventName: string) {\n  if (element instanceof Array) {\n    for (var i = 0; i < element.length; ++i) {\n      removeEventListener(element[i], eventName)\n    }\n    return\n  }\n  element.removeEventListener(eventName, store(element).getData(`event${eventName}`))\n  store(element).deleteData(`event${eventName}`)\n}\n\nexport { addEventListener, removeEventListener }\n","/**\n * @param {Array<HTMLElement>|HTMLElement} element\n * @param {string} attribute\n * @param {string} value\n */\nfunction addAttribute (element: Array<HTMLElement>|HTMLElement, attribute:string, value:string) {\n  if (element instanceof Array) {\n    for (var i = 0; i < element.length; ++i) {\n      addAttribute(element[i], attribute, value)\n    }\n    return\n  }\n  element.setAttribute(attribute, value)\n}\n/**\n * @param {Array|HTMLElement} element\n * @param {string} attribute\n */\nfunction removeAttribute (element: Array<HTMLElement>|HTMLElement, attribute:string) {\n  if (element instanceof Array) {\n    for (var i = 0; i < element.length; ++i) {\n      removeAttribute(element[i], attribute)\n    }\n    return\n  }\n  element.removeAttribute(attribute)\n}\n\nexport { addAttribute, removeAttribute }\n","/**\n * @param {HTMLElement} element\n * @returns {Object}\n */\nexport default (element: HTMLElement): offsetObject => {\n  if (!element.parentElement || element.getClientRects().length === 0) {\n    throw new Error('target element must be part of the dom')\n  }\n\n  let rect = element.getClientRects()[0]\n  return {\n    left: rect.left + window.pageXOffset,\n    right: rect.right + window.pageXOffset,\n    top: rect.top + window.pageYOffset,\n    bottom: rect.bottom + window.pageYOffset\n  }\n}\n","/* eslint-env browser */\n/**\n * Get position of the element relatively to its sibling elements\n * @param {HTMLElement} element\n * @returns {number}\n */\nexport default (element: HTMLElement, elementList: HTMLCollection | NodeList | Array<HTMLElement>): number => {\n  if (!(element instanceof HTMLElement) || !(elementList instanceof NodeList || elementList instanceof HTMLCollection || elementList instanceof Array)) {\n    throw new Error('You must provide an element and a list of elements.')\n  }\n\n  return Array.from(elementList).indexOf(element)\n}\n","/* eslint-env browser */\n/**\n * Test whether element is in DOM\n * @param {HTMLElement} element\n * @returns {boolean}\n */\nexport default (element: HTMLElement): boolean => {\n  if (!(element instanceof HTMLElement)) {\n    throw new Error('Element is not a node element.')\n  }\n\n  return element.parentNode !== null\n}\n","/* eslint-env browser */\n/**\n * Insert node before or after target\n * @param {HTMLElement} referenceNode - reference element\n * @param {HTMLElement} newElement - element to be inserted\n * @param {String} position - insert before or after reference element\n */\nlet insertNode = (referenceNode: HTMLElement, newElement: HTMLElement, position: String) => {\n  if (!(referenceNode instanceof HTMLElement) || !(referenceNode.parentElement instanceof HTMLElement)) {\n    throw new Error('target and element must be a node')\n  }\n  referenceNode.parentElement.insertBefore(\n    newElement,\n    (position === 'before' ? referenceNode : referenceNode.nextElementSibling)\n  )\n}\n/**\n * Insert before target\n * @param {HTMLElement} target\n * @param {HTMLElement} element\n */\nlet insertBefore = (target: HTMLElement, element: HTMLElement) => insertNode(target, element, 'before')\n/**\n * Insert after target\n * @param {HTMLElement} target\n * @param {HTMLElement} element\n */\nlet insertAfter = (target: HTMLElement, element: HTMLElement) => insertNode(target, element, 'after')\n\nexport { insertBefore, insertAfter }\n","/* eslint-env browser */\n/**\n * Get height of an element including padding\n * @param {HTMLElement} element an dom element\n */\nexport default (element: HTMLElement) => {\n  if (!(element instanceof HTMLElement)) {\n    throw new Error('You must provide a valid dom element')\n  }\n  // get calculated style of element\n  let style = window.getComputedStyle(element)\n  // pick applicable properties, convert to int and reduce by adding\n  return ['height', 'padding-top', 'padding-bottom']\n    .map((key) => {\n      let int = parseInt(style.getPropertyValue(key), 10)\n      return isNaN(int) ? 0 : int\n    })\n    .reduce((sum, value) => sum + value)\n}\n","/* eslint-env browser */\n/**\n * get handle or return item\n * @param {Array<HTMLElement>} items\n * @param {string} selector\n */\nexport default (items: Array<HTMLElement>, selector: string): Array<HTMLElement> => {\n  if (!(items instanceof Array)) {\n    throw new Error('You must provide a Array of HTMLElements to be filtered.')\n  }\n\n  if (typeof selector !== 'string') {\n    return items\n  }\n\n  return items\n  // remove items without handle from array\n    .filter((item: HTMLElement) => {\n      return item.querySelector(selector) instanceof HTMLElement\n    })\n    // replace item with handle in array\n    .map((item: HTMLElement) => {\n      return item.querySelector(selector)\n    })\n}\n","/* eslint-env browser */\nimport offset from './offset'\n/**\n * defaultDragImage returns the current item as dragged image\n * @param {HTMLElement} draggedElement - the item that the user drags\n * @param {object} elementOffset - an object with the offsets top, left, right & bottom\n * @param {Event} event - the original drag event object\n * @return {object} with element, posX and posY properties\n */\nlet defaultDragImage = (draggedElement: HTMLElement, elementOffset: offsetObject, event: DragEvent): object => {\n  return {\n    element: draggedElement,\n    posX: event.pageX - elementOffset.left,\n    posY: event.pageY - elementOffset.top\n  }\n}\n/**\n * attaches an element as the drag image to an event\n * @param {Event} event - the original drag event object\n * @param {HTMLElement} draggedElement - the item that the user drags\n * @param {Function} customDragImage - function to create a custom dragImage\n * @return void\n */\nexport default (event: DragEvent, draggedElement: HTMLElement, customDragImage: Function): void => {\n  // check if event is provided\n  if (!(event instanceof Event)) {\n    throw new Error('setDragImage requires a DragEvent as the first argument.')\n  }\n  // check if draggedElement is provided\n  if (!(draggedElement instanceof HTMLElement)) {\n    throw new Error('setDragImage requires the dragged element as the second argument.')\n  }\n  // set default function of none provided\n  if (!customDragImage) {\n    customDragImage = defaultDragImage\n  }\n  // check if setDragImage method is available\n  if (event.dataTransfer && event.dataTransfer.setDragImage) {\n    // get the elements offset\n    let elementOffset = offset(draggedElement)\n    // get the dragImage\n    let dragImage = customDragImage(draggedElement, elementOffset, event)\n    // check if custom function returns correct values\n    if (!(dragImage.element instanceof HTMLElement) || typeof dragImage.posX !== 'number' || typeof dragImage.posY !== 'number') {\n      throw new Error('The customDragImage function you provided must return and object with the properties element[string], posX[integer], posY[integer].')\n    }\n    // needs to be set for HTML5 drag & drop to work\n    event.dataTransfer.effectAllowed = 'copyMove'\n    // Firefox requires it to use the event target's id for the data\n    event.dataTransfer.setData('text/plain', event.target.id)\n    // set the drag image on the event\n    event.dataTransfer.setDragImage(dragImage.element, dragImage.posX, dragImage.posY)\n  }\n}\n","import store from './store'\n/**\n * Check if curList accepts items from destList\n * @param {sortable} destination the container an item is move to\n * @param {sortable} origin the container an item comes from\n */\nexport default (destination: sortable, origin: sortable) => {\n  // check if valid sortable\n  if (destination.isSortable === true) {\n    const acceptFrom = store(destination).getConfig('acceptFrom')\n    // check if acceptFrom is valid\n    if (acceptFrom !== null && acceptFrom !== false && typeof acceptFrom !== 'string') {\n      throw new Error('HTML5Sortable: Wrong argument, \"acceptFrom\" must be \"null\", \"false\", or a valid selector string.')\n    }\n\n    if (acceptFrom !== null) {\n      return acceptFrom !== false && acceptFrom.split(',').filter(function (sel) {\n        return sel.length > 0 && origin.matches(sel)\n      }).length > 0\n    }\n    // drop in same list\n    if (destination === origin) {\n      return true\n    }\n    // check if lists are connected with connectWith\n    if (store(destination).getConfig('connectWith') !== undefined && store(destination).getConfig('connectWith') !== null) {\n      return store(destination).getConfig('connectWith') === store(origin).getConfig('connectWith')\n    }\n  }\n  return false\n}\n","/* eslint-env browser */\n'use strict'\n\nimport { addData as _data, removeData as _removeData } from './data'\nimport _filter from './filter'\nimport { addEventListener as _on, removeEventListener as _off } from './eventListener'\nimport { addAttribute as _attr, removeAttribute as _removeAttr } from './attribute'\nimport _offset from './offset'\nimport _debounce from './debounce'\nimport _index from './index'\nimport isInDom from './isInDom'\nimport { insertBefore as _before, insertAfter as _after } from './insertHtmlElements'\nimport _serialize from './serialize'\nimport _makePlaceholder from './makePlaceholder'\nimport _getElementHeight from './elementHeight'\nimport _getHandles from './getHandles'\nimport setDragImage from './setDragImage'\nimport { default as store, stores } from './store' /* eslint-disable-line */\nimport _listsConnected from './isConnected'\nimport defaultConfiguration from './defaultConfiguration'\nimport enableHoverClass from './hoverClass'\n/*\n * variables global to the plugin\n */\nlet dragging\nlet draggingHeight\n\n/*\n * Keeps track of the initialy selected list, where 'dragstart' event was triggered\n * It allows us to move the data in between individual Sortable List instances\n */\n\n// Origin List - data from before any item was changed\nlet originContainer\nlet originIndex\nlet originElementIndex\nlet originItemsBeforeUpdate\n\n// Destination List - data from before any item was changed\nlet destinationItemsBeforeUpdate\n\n/**\n * remove event handlers from items\n * @param {Array|NodeList} items\n */\nconst _removeItemEvents = function (items) {\n  _off(items, 'dragstart')\n  _off(items, 'dragend')\n  _off(items, 'dragover')\n  _off(items, 'dragenter')\n  _off(items, 'drop')\n  _off(items, 'mouseenter')\n  _off(items, 'mouseleave')\n}\n/**\n * _getDragging returns the current element to drag or\n * a copy of the element.\n * Is Copy Active for sortable\n * @param {HTMLElement} draggedItem - the item that the user drags\n * @param {HTMLElement} sortable a single sortable\n */\nconst _getDragging = function (draggedItem, sortable) {\n  let ditem = draggedItem\n  if (store(sortable).getConfig('copy') === true) {\n    ditem = draggedItem.cloneNode(true)\n    _attr(ditem, 'aria-copied', 'true')\n    draggedItem.parentElement.appendChild(ditem)\n    ditem.style.display = 'none'\n    ditem.oldDisplay = draggedItem.style.display\n  }\n  return ditem\n}\n/**\n * Remove data from sortable\n * @param {HTMLElement} sortable a single sortable\n */\nconst _removeSortableData = function (sortable) {\n  _removeData(sortable)\n  _removeAttr(sortable, 'aria-dropeffect')\n}\n/**\n * Remove data from items\n * @param {Array<HTMLElement>|HTMLElement} items\n */\nconst _removeItemData = function (items) {\n  _removeAttr(items, 'aria-grabbed')\n  _removeAttr(items, 'aria-copied')\n  _removeAttr(items, 'draggable')\n  _removeAttr(items, 'role')\n}\n/**\n * find sortable from element. travels up parent element until found or null.\n * @param {HTMLElement} element a single sortable\n */\nfunction findSortable (element) {\n  while (element.isSortable !== true) {\n    element = element.parentElement\n  }\n  return element\n}\n/**\n * Dragging event is on the sortable element. finds the top child that\n * contains the element.\n * @param {HTMLElement} sortableElement a single sortable\n * @param {HTMLElement} element is that being dragged\n */\nfunction findDragElement (sortableElement, element) {\n  const options = _data(sortableElement, 'opts')\n  const items = _filter(sortableElement.children, options.items)\n  const itemlist = items.filter(function (ele) {\n    return ele.contains(element)\n  })\n\n  return itemlist.length > 0 ? itemlist[0] : element\n}\n/**\n * Destroy the sortable\n * @param {HTMLElement} sortableElement a single sortable\n */\nconst _destroySortable = function (sortableElement) {\n  const opts = _data(sortableElement, 'opts') || {}\n  const items = _filter(sortableElement.children, opts.items)\n  const handles = _getHandles(items, opts.handle)\n  // remove event handlers & data from sortable\n  _off(sortableElement, 'dragover')\n  _off(sortableElement, 'dragenter')\n  _off(sortableElement, 'drop')\n  // remove event data from sortable\n  _removeSortableData(sortableElement)\n  // remove event handlers & data from items\n  _off(handles, 'mousedown')\n  _removeItemEvents(items)\n  _removeItemData(items)\n}\n/**\n * Enable the sortable\n * @param {HTMLElement} sortableElement a single sortable\n */\nconst _enableSortable = function (sortableElement) {\n  const opts = _data(sortableElement, 'opts')\n  const items = _filter(sortableElement.children, opts.items)\n  const handles = _getHandles(items, opts.handle)\n  _attr(sortableElement, 'aria-dropeffect', 'move')\n  _data(sortableElement, '_disabled', 'false')\n  _attr(handles, 'draggable', 'true')\n  // @todo: remove this fix\n  // IE FIX for ghost\n  // can be disabled as it has the side effect that other events\n  // (e.g. click) will be ignored\n  if (opts.disableIEFix === false) {\n    const spanEl = (document || window.document).createElement('span')\n    if (typeof spanEl.dragDrop === 'function') {\n      _on(handles, 'mousedown', function () {\n        if (items.indexOf(this) !== -1) {\n          this.dragDrop()\n        } else {\n          let parent = this.parentElement\n          while (items.indexOf(parent) === -1) {\n            parent = parent.parentElement\n          }\n          parent.dragDrop()\n        }\n      })\n    }\n  }\n}\n/**\n * Disable the sortable\n * @param {HTMLElement} sortableElement a single sortable\n */\nconst _disableSortable = function (sortableElement) {\n  const opts = _data(sortableElement, 'opts')\n  const items = _filter(sortableElement.children, opts.items)\n  const handles = _getHandles(items, opts.handle)\n  _attr(sortableElement, 'aria-dropeffect', 'none')\n  _data(sortableElement, '_disabled', 'true')\n  _attr(handles, 'draggable', 'false')\n  _off(handles, 'mousedown')\n}\n/**\n * Reload the sortable\n * @param {HTMLElement} sortableElement a single sortable\n * @description events need to be removed to not be double bound\n */\nconst _reloadSortable = function (sortableElement) {\n  const opts = _data(sortableElement, 'opts')\n  const items = _filter(sortableElement.children, opts.items)\n  const handles = _getHandles(items, opts.handle)\n  _data(sortableElement, '_disabled', 'false')\n  // remove event handlers from items\n  _removeItemEvents(items)\n  _off(handles, 'mousedown')\n  // remove event handlers from sortable\n  _off(sortableElement, 'dragover')\n  _off(sortableElement, 'dragenter')\n  _off(sortableElement, 'drop')\n}\n\n/**\n * Public sortable object\n * @param {Array|NodeList} sortableElements\n * @param {object|string} options|method\n */\nexport default function sortable (sortableElements, options: object|string|undefined): sortable {\n  // get method string to see if a method is called\n  const method = String(options)\n  options = options || {}\n  // check if the user provided a selector instead of an element\n  if (typeof sortableElements === 'string') {\n    sortableElements = document.querySelectorAll(sortableElements)\n  }\n  // if the user provided an element, return it in an array to keep the return value consistant\n  if (sortableElements instanceof HTMLElement) {\n    sortableElements = [sortableElements]\n  }\n\n  sortableElements = Array.prototype.slice.call(sortableElements)\n\n  if (/serialize/.test(method)) {\n    return sortableElements.map((sortableContainer) => {\n      let opts = _data(sortableContainer, 'opts')\n      return _serialize(sortableContainer, opts.itemSerializer, opts.containerSerializer)\n    })\n  }\n\n  sortableElements.forEach(function (sortableElement) {\n    if (/enable|disable|destroy/.test(method)) {\n      return sortable[method](sortableElement)\n    }\n    // log deprecation\n    ['connectWith', 'disableIEFix'].forEach((configKey) => {\n      if (options.hasOwnProperty(configKey) && options[configKey] !== null) {\n        console.warn(`HTML5Sortable: You are using the deprecated configuration \"${configKey}\". This will be removed in an upcoming version, make sure to migrate to the new options when updating.`)\n      }\n    })\n    // merge options with default options\n    options = Object.assign({}, defaultConfiguration, store(sortableElement).config, options)\n    // init data store for sortable\n    store(sortableElement).config = options\n    // set options on sortable\n    _data(sortableElement, 'opts', options)\n    // property to define as sortable\n    sortableElement.isSortable = true\n    // reset sortable\n    _reloadSortable(sortableElement)\n    // initialize\n    const listItems = _filter(sortableElement.children, options.items)\n    // create element if user defined a placeholder element as a string\n    let customPlaceholder\n    if (options.placeholder !== null && options.placeholder !== undefined) {\n      let tempContainer = document.createElement(sortableElement.tagName)\n      tempContainer.innerHTML = options.placeholder\n      customPlaceholder = tempContainer.children[0]\n    }\n    // add placeholder\n    store(sortableElement).placeholder = _makePlaceholder(sortableElement, customPlaceholder, options.placeholderClass)\n\n    _data(sortableElement, 'items', options.items)\n\n    if (options.acceptFrom) {\n      _data(sortableElement, 'acceptFrom', options.acceptFrom)\n    } else if (options.connectWith) {\n      _data(sortableElement, 'connectWith', options.connectWith)\n    }\n\n    _enableSortable(sortableElement)\n    _attr(listItems, 'role', 'option')\n    _attr(listItems, 'aria-grabbed', 'false')\n    // enable hover class\n    enableHoverClass(sortableElement, true)\n    /*\n     Handle drag events on draggable items\n     Handle is set at the sortableElement level as it will bubble up\n     from the item\n     */\n    _on(sortableElement, 'dragstart', function (e) {\n      // ignore dragstart events\n      if (e.target.isSortable === true) {\n        return\n      }\n      e.stopImmediatePropagation()\n\n      if ((options.handle && !e.target.matches(options.handle)) || e.target.getAttribute('draggable') === 'false') {\n        return\n      }\n\n      const sortableContainer = findSortable(e.target)\n      const dragItem = findDragElement(sortableContainer, e.target)\n\n      // grab values\n      originItemsBeforeUpdate = _filter(sortableContainer.children, options.items)\n      originIndex = originItemsBeforeUpdate.indexOf(dragItem)\n      originElementIndex = _index(dragItem, sortableContainer.children)\n      originContainer = sortableContainer\n\n      // add transparent clone or other ghost to cursor\n      setDragImage(e, dragItem, options.customDragImage)\n      // cache selsection & add attr for dragging\n      draggingHeight = _getElementHeight(dragItem)\n      dragItem.classList.add(options.draggingClass)\n      dragging = _getDragging(dragItem, sortableContainer)\n      _attr(dragging, 'aria-grabbed', 'true')\n\n      // dispatch sortstart event on each element in group\n      sortableContainer.dispatchEvent(new CustomEvent('sortstart', {\n        detail: {\n          origin: {\n            elementIndex: originElementIndex,\n            index: originIndex,\n            container: originContainer\n          },\n          item: dragging\n        }\n      }))\n    })\n\n    /*\n     We are capturing targetSortable before modifications with 'dragenter' event\n    */\n    _on(sortableElement, 'dragenter', (e) => {\n      if (e.target.isSortable === true) {\n        return\n      }\n      const sortableContainer = findSortable(e.target)\n      destinationItemsBeforeUpdate = _filter(sortableContainer.children, _data(sortableContainer, 'items'))\n        .filter(item => item !== store(sortableElement).placeholder)\n    })\n    /*\n     * Dragend Event - https://developer.mozilla.org/en-US/docs/Web/Events/dragend\n     * Fires each time dragEvent end, or ESC pressed\n     * We are using it to clean up any draggable elements and placeholders\n     */\n    _on(sortableElement, 'dragend', function (e) {\n      if (!dragging) {\n        return\n      }\n\n      dragging.classList.remove(options.draggingClass)\n      _attr(dragging, 'aria-grabbed', 'false')\n\n      if (dragging.getAttribute('aria-copied') === 'true' && _data(dragging, 'dropped') !== 'true') {\n        dragging.remove()\n      }\n\n      dragging.style.display = dragging.oldDisplay\n      delete dragging.oldDisplay\n\n      const visiblePlaceholder = Array.from(stores.values()).map(data => data.placeholder)\n        .filter(placeholder => placeholder instanceof HTMLElement)\n        .filter(isInDom)[0]\n\n      if (visiblePlaceholder) {\n        visiblePlaceholder.remove()\n      }\n\n      // dispatch sortstart event on each element in group\n      sortableElement.dispatchEvent(new CustomEvent('sortstop', {\n        detail: {\n          origin: {\n            elementIndex: originElementIndex,\n            index: originIndex,\n            container: originContainer\n          },\n          item: dragging\n        }\n      }))\n\n      dragging = null\n      draggingHeight = null\n    })\n\n    /*\n     * Drop Event - https://developer.mozilla.org/en-US/docs/Web/Events/drop\n     * Fires when valid drop target area is hit\n     */\n    _on(sortableElement, 'drop', function (e) {\n      if (!_listsConnected(sortableElement, dragging.parentElement)) {\n        return\n      }\n      e.preventDefault()\n      e.stopPropagation()\n\n      _data(dragging, 'dropped', 'true')\n      // get the one placeholder that is currently visible\n      const visiblePlaceholder = Array.from(stores.values()).map((data) => {\n        return data.placeholder\n      })\n        // filter only HTMLElements\n        .filter(placeholder => placeholder instanceof HTMLElement)\n        // filter only elements in DOM\n        .filter(isInDom)[0]\n      // attach element after placeholder\n      _after(visiblePlaceholder, dragging)\n      // remove placeholder from dom\n      visiblePlaceholder.remove()\n\n      /*\n       * Fires Custom Event - 'sortstop'\n       */\n      sortableElement.dispatchEvent(new CustomEvent('sortstop', {\n        detail: {\n          origin: {\n            elementIndex: originElementIndex,\n            index: originIndex,\n            container: originContainer\n          },\n          item: dragging\n        }\n      }))\n\n      const placeholder = store(sortableElement).placeholder\n      const originItems = _filter(originContainer.children, options.items)\n        .filter(item => item !== placeholder)\n      const destinationContainer = this.isSortable === true ? this : this.parentElement\n      const destinationItems = _filter(destinationContainer.children, _data(destinationContainer, 'items'))\n        .filter(item => item !== placeholder)\n      const destinationElementIndex = _index(dragging, Array.from(dragging.parentElement.children)\n        .filter(item => item !== placeholder))\n      const destinationIndex = _index(dragging, destinationItems)\n\n      /*\n       * When a list item changed container lists or index within a list\n       * Fires Custom Event - 'sortupdate'\n       */\n      if (originElementIndex !== destinationElementIndex || originContainer !== destinationContainer) {\n        sortableElement.dispatchEvent(new CustomEvent('sortupdate', {\n          detail: {\n            origin: {\n              elementIndex: originElementIndex,\n              index: originIndex,\n              container: originContainer,\n              itemsBeforeUpdate: originItemsBeforeUpdate,\n              items: originItems\n            },\n            destination: {\n              index: destinationIndex,\n              elementIndex: destinationElementIndex,\n              container: destinationContainer,\n              itemsBeforeUpdate: destinationItemsBeforeUpdate,\n              items: destinationItems\n            },\n            item: dragging\n          }\n        }))\n      }\n    })\n\n    const debouncedDragOverEnter = _debounce((sortableElement, element, pageY) => {\n      if (!dragging) {\n        return\n      }\n\n      // set placeholder height if forcePlaceholderSize option is set\n      if (options.forcePlaceholderSize) {\n        store(sortableElement).placeholder.style.height = draggingHeight + 'px'\n      }\n      // if element the draggedItem is dragged onto is within the array of all elements in list\n      // (not only items, but also disabled, etc.)\n      if (Array.from(sortableElement.children).indexOf(element) > -1) {\n        const thisHeight = _getElementHeight(element)\n        const placeholderIndex = _index(store(sortableElement).placeholder, element.parentElement.children)\n        const thisIndex = _index(element, element.parentElement.children)\n        // Check if `element` is bigger than the draggable. If it is, we have to define a dead zone to prevent flickering\n        if (thisHeight > draggingHeight) {\n          // Dead zone?\n          const deadZone = thisHeight - draggingHeight\n          const offsetTop = _offset(element).top\n          if (placeholderIndex < thisIndex && pageY < offsetTop) {\n            return\n          }\n          if (placeholderIndex > thisIndex &&\n              pageY > offsetTop + thisHeight - deadZone) {\n            return\n          }\n        }\n\n        if (dragging.oldDisplay === undefined) {\n          dragging.oldDisplay = dragging.style.display\n        }\n\n        if (dragging.style.display !== 'none') {\n          dragging.style.display = 'none'\n        }\n        // To avoid flicker, determine where to position the placeholder\n        // based on where the mouse pointer is relative to the elements\n        // vertical center.\n        let placeAfter = false\n        try {\n          let elementMiddle = _offset(element).top + element.offsetHeight / 2\n          placeAfter = pageY >= elementMiddle\n        } catch (e) {\n          placeAfter = placeholderIndex < thisIndex\n        }\n\n        if (placeAfter) {\n          _after(element, store(sortableElement).placeholder)\n        } else {\n          _before(element, store(sortableElement).placeholder)\n        }\n        // get placeholders from all stores & remove all but current one\n        Array.from(stores.values())\n          // remove empty values\n          .filter(data => data.placeholder !== undefined)\n          // foreach placeholder in array if outside of current sorableContainer -> remove from DOM\n          .forEach((data) => {\n            if (data.placeholder !== store(sortableElement).placeholder) {\n              data.placeholder.remove()\n            }\n          })\n      } else {\n        // get all placeholders from store\n        let placeholders = Array.from(stores.values())\n          .filter((data) => data.placeholder !== undefined)\n          .map((data) => {\n            return data.placeholder\n          })\n        // check if element is not in placeholders\n        if (placeholders.indexOf(element) === -1 && sortableElement === element && !_filter(element.children, options.items).length) {\n          placeholders.forEach((element) => element.remove())\n          element.appendChild(store(sortableElement).placeholder)\n        }\n      }\n    }, options.debounce)\n    // Handle dragover and dragenter events on draggable items\n    const onDragOverEnter = function (e) {\n      let element = e.target\n      const sortableElement = element.isSortable === true ? element : findSortable(element)\n      element = findDragElement(sortableElement, element)\n      if (!dragging || !_listsConnected(sortableElement, dragging.parentElement) || _data(sortableElement, '_disabled') === 'true') {\n        return\n      }\n      const options = _data(sortableElement, 'opts')\n      if (parseInt(options.maxItems) && _filter(sortableElement.children, _data(sortableElement, 'items')).length >= parseInt(options.maxItems) && dragging.parentElement !== sortableElement) {\n        return\n      }\n      e.preventDefault()\n      e.stopPropagation()\n      e.dataTransfer.dropEffect = store(sortableElement).getConfig('copy') === true ? 'copy' : 'move'\n      debouncedDragOverEnter(sortableElement, element, e.pageY)\n    }\n\n    _on(listItems.concat(sortableElement), 'dragover', onDragOverEnter)\n    _on(listItems.concat(sortableElement), 'dragenter', onDragOverEnter)\n  })\n\n  return sortableElements\n}\n\nsortable.destroy = function (sortableElement) {\n  _destroySortable(sortableElement)\n}\n\nsortable.enable = function (sortableElement) {\n  _enableSortable(sortableElement)\n}\n\nsortable.disable = function (sortableElement) {\n  _disableSortable(sortableElement)\n}\n\n/* START.TESTS_ONLY */\nsortable.__testing = {\n  // add internal methods here for testing purposes\n  _data: _data,\n  _removeItemEvents: _removeItemEvents,\n  _removeItemData: _removeItemData,\n  _removeSortableData: _removeSortableData\n}\n/* END.TESTS_ONLY */\n","/**\n * default configurations\n */\nexport default {\n  items: null,\n  // deprecated\n  connectWith: null,\n  // deprecated\n  disableIEFix: null,\n  acceptFrom: null,\n  copy: false,\n  placeholder: null,\n  placeholderClass: 'sortable-placeholder',\n  draggingClass: 'sortable-dragging',\n  hoverClass: false,\n  debounce: 0,\n  throttleTime: 100,\n  maxItems: 0,\n  itemSerializer: undefined,\n  containerSerializer: undefined,\n  customDragImage: null\n}\n","/* eslint-env browser */\nimport store from './store'\nimport _filter from './filter'\nimport _throttle from './throttle'\nimport { addEventListener as _on, removeEventListener as _off } from './eventListener'\n/**\n * enable or disable hoverClass on mouseenter/leave if container Items\n * @param {sortable} sortableContainer a valid sortableContainer\n * @param {boolean} enable enable or disable event\n */\n// export default (sortableContainer: sortable, enable: boolean) => {\nexport default (sortableContainer: sortable, enable: boolean) => {\n  if (typeof store(sortableContainer).getConfig('hoverClass') === 'string') {\n    let hoverClasses = store(sortableContainer).getConfig('hoverClass').split(' ')\n    // add class on hover\n    if (enable === true) {\n      _on(sortableContainer, 'mousemove', _throttle((event) => {\n        // check of no mouse button was pressed when mousemove started == no drag\n        if (event.buttons === 0) {\n          _filter(sortableContainer.children, store(sortableContainer).getConfig('items')).forEach(item => {\n            if (item !== event.target) {\n              item.classList.remove(...hoverClasses)\n            } else {\n              item.classList.add(...hoverClasses)\n            }\n          })\n        }\n      }, store(sortableContainer).getConfig('throttleTime')))\n      // remove class on leave\n      _on(sortableContainer, 'mouseleave', () => {\n        _filter(sortableContainer.children, store(sortableContainer).getConfig('items')).forEach(item => {\n          item.classList.remove(...hoverClasses)\n        })\n      })\n    // remove events\n    } else {\n      _off(sortableContainer, 'mousemove')\n      _off(sortableContainer, 'mouseleave')\n    }\n  }\n}\n","/**\n * make sure a function is only called once within the given amount of time\n * @param {Function} fn the function to throttle\n * @param {number} threshold time limit for throttling\n */\n// must use function to keep this context\nexport default function (fn: Function, threshold: number = 250) {\n  // check function\n  if (typeof fn !== 'function') {\n    throw new Error('You must provide a function as the first argument for throttle.')\n  }\n  // check threshold\n  if (typeof threshold !== 'number') {\n    throw new Error('You must provide a number as the second argument for throttle.')\n  }\n\n  let lastEventTimestamp = null\n\n  return (...args) => {\n    let now = Date.now()\n    if (lastEventTimestamp === null || now - lastEventTimestamp >= threshold) {\n      lastEventTimestamp = now\n      fn.apply(this, args)\n    }\n  }\n}\n","/* eslint-env browser */\nimport { addData as _data } from './data' // yuk, data really needs to be refactored\nimport filter from './filter'\nimport index from './index'\n/**\n * Filter only wanted nodes\n * @param {HTMLElement} sortableContainer\n * @param {Function} customSerializer\n * @returns {Array}\n */\nexport default (sortableContainer: HTMLElement, customItemSerializer: Function = (serializedItem: serializedItem, sortableContainer: HTMLElement) => serializedItem, customContainerSerializer: Function = (serializedContainer: object) => serializedContainer): object => {\n  // check for valid sortableContainer\n  if (!(sortableContainer instanceof HTMLElement) || !sortableContainer.isSortable === true) {\n    throw new Error('You need to provide a sortableContainer to be serialized.')\n  }\n  // check for valid serializers\n  if (typeof customItemSerializer !== 'function' || typeof customContainerSerializer !== 'function') {\n    throw new Error('You need to provide a valid serializer for items and the container.')\n  }\n  // get options\n  let options = _data(sortableContainer, 'opts')\n\n  let item: string|undefined = options.items\n\n  // serialize container\n  let items = filter(sortableContainer.children, item)\n  let serializedItems: serializedItem[] = items.map((item) => {\n    return {\n      parent: sortableContainer,\n      node: item,\n      html: item.outerHTML,\n      index: index(item, items)\n    }\n  })\n  // serialize container\n  let container = {\n    node: sortableContainer,\n    itemCount: serializedItems.length\n  }\n\n  return {\n    container: customContainerSerializer(container),\n    items: serializedItems.map((item: object) => customItemSerializer(item, sortableContainer))\n  }\n}\n","/* eslint-env browser */\n/**\n * create a placeholder element\n * @param {HTMLElement} sortableElement a single sortable\n * @param {string|undefined} placeholder a string representing an html element\n * @param {string} placeholderClasses a string representing the classes that should be added to the placeholder\n */\nexport default (sortableElement: HTMLElement, placeholder?: HTMLElement, placeholderClass: string = 'sortable-placeholder') => {\n  if (!(sortableElement instanceof HTMLElement)) {\n    throw new Error('You must provide a valid element as a sortable.')\n  }\n  // if placeholder is not an element\n  if (!(placeholder instanceof HTMLElement) && placeholder !== undefined) {\n    throw new Error('You must provide a valid element as a placeholder or set ot to undefined.')\n  }\n  // if no placeholder element is given\n  if (placeholder === undefined) {\n    if (['UL', 'OL'].includes(sortableElement.tagName)) {\n      placeholder = document.createElement('li')\n    } else if (['TABLE', 'TBODY'].includes(sortableElement.tagName)) {\n      placeholder = document.createElement('tr')\n      // set colspan to always all rows, otherwise the item can only be dropped in first column\n      placeholder.innerHTML = '<td colspan=\"100\"></td>'\n    } else {\n      placeholder = document.createElement('div')\n    }\n  }\n  // add classes to placeholder\n  if (typeof placeholderClass === 'string') {\n    placeholder.classList.add(...placeholderClass.split(' '))\n  }\n\n  return placeholder\n}\n","/**\n * Creates and returns a new debounced version of the passed function which will postpone its execution until after wait milliseconds have elapsed\n * @param {Function} func to debounce\n * @param {number} time to wait before calling function with latest arguments, 0 - no debounce\n * @returns {function} - debounced function\n */\nexport default (func: Function, wait: number = 0): Function => {\n  let timeout\n  return (...args) => {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      func(...args)\n    }, wait)\n  }\n}\n"],"names":["element","key","value","undefined","h5s","data","nodes","selector","NodeList","HTMLCollection","Array","Error","from","filter","item","nodeType","matches","stores","Map","this","Object","Store","config","_config","forEach","mergedConfig","assign","entries","has","set","get","_placeholder","placeholder","HTMLElement","_data","delete","sortableElement","eventName","callback","i","length","addEventListener","store","setData","removeEventListener","getData","deleteData","attribute","addAttribute","setAttribute","removeAttribute","parentElement","getClientRects","rect","left","window","pageXOffset","right","top","pageYOffset","bottom","elementList","indexOf","parentNode","insertNode","referenceNode","newElement","position","insertBefore","nextElementSibling","target","insertAfter","style","getComputedStyle","map","int","parseInt","getPropertyValue","isNaN","reduce","sum","items","querySelector","defaultDragImage","draggedElement","elementOffset","event","posX","pageX","posY","pageY","destination","origin","isSortable","acceptFrom","getConfig","split","sel","dragging","draggingHeight","originContainer","originIndex","originElementIndex","originItemsBeforeUpdate","destinationItemsBeforeUpdate","connectWith","disableIEFix","copy","placeholderClass","draggingClass","hoverClass","debounce","throttleTime","maxItems","itemSerializer","containerSerializer","customDragImage","sortableContainer","enable","hoverClasses_1","_on","fn","threshold","lastEventTimestamp","_i","args","now","Date","apply","_this","_throttle","buttons","_filter","children","classList","remove","add","_off","_removeItemEvents","_getDragging","draggedItem","sortable","ditem","_attr","cloneNode","appendChild","display","oldDisplay","options","itemlist","ele","contains","_destroySortable","opts","handles","_getHandles","handle","_removeAttr","_enableSortable","document","createElement","dragDrop","parent","_reloadSortable","sortableElements","method","String","querySelectorAll","prototype","slice","call","test","customItemSerializer","customContainerSerializer","serializedItem","serializedContainer","serializedItems","node","html","outerHTML","index","container","itemCount","_serialize","configKey","hasOwnProperty","console","warn","defaultConfiguration","customPlaceholder","listItems","tempContainer","tagName","innerHTML","includes","_makePlaceholder","enableHoverClass","e","stopImmediatePropagation","getAttribute","findSortable","dragItem","findDragElement","_index","Event","dataTransfer","setDragImage","dragImage","offset","effectAllowed","id","_getElementHeight","dispatchEvent","CustomEvent","detail","elementIndex","visiblePlaceholder","values","isInDom","_listsConnected","preventDefault","stopPropagation","_after","originItems","destinationContainer","destinationItems","destinationElementIndex","destinationIndex","itemsBeforeUpdate","func","wait","timeout","debouncedDragOverEnter","forcePlaceholderSize","height","thisHeight","placeholderIndex","thisIndex","deadZone","offsetTop","_offset","placeAfter","offsetHeight","_before","placeholders","clearTimeout","setTimeout","onDragOverEnter","dropEffect","concat","destroy","disable"],"mappings":"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"}